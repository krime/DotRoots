!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANY_SOURCE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ANY_SOURCE = MPI_ANY_SOURCE;$/;"	v
ANY_TAG	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ANY_TAG = MPI_ANY_TAG;$/;"	v
APPNUM	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int APPNUM = MPI_APPNUM;$/;"	v
Abort	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Abort(int errorcode);$/;"	p	class:Comm	access:public	signature:(int errorcode)
Abort	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Abort(int errorcode) $/;"	f	class:MPI::Comm	signature:(int errorcode)
Accept	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Accept(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Accept	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Accept(const char* port_name, $/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
Accumulate	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Accumulate(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Accumulate	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Accumulate(const void* origin_addr, int origin_count,$/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Aint	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Aint Aint;$/;"	t	namespace:MPI
Allgather	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allgather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Allgather	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
Allgatherv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allgatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype) const
Allgatherv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype) const
Alloc_mem	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Alloc_mem(Aint size, const Info& info);$/;"	p	signature:(Aint size, const Info& info)
Alloc_mem	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Alloc_mem(MPI::Aint size, const MPI::Info& info) $/;"	f	class:MPI	signature:(MPI::Aint size, const MPI::Info& info)
Allreduce	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Allreduce	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
Alltoall	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoall(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Alltoall	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoall(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
Alltoallv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype & recvtype) const
Alltoallv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype & recvtype) const
Alltoallw	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype recvtypes[]) const
Alltoallw	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const
Attach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Attach_buffer(void* buffer, int size);$/;"	p	signature:(void* buffer, int size)
Attach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Attach_buffer(void* buffer, int size)$/;"	f	class:MPI	signature:(void* buffer, int size)
BSEND_OVERHEAD	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int BSEND_OVERHEAD = MPI_BSEND_OVERHEAD;$/;"	v
Barrier	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Barrier() const;$/;"	p	class:Comm	access:public	signature:() const
Barrier	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Barrier() const$/;"	f	class:MPI::Comm	signature:() const
Bcast	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Bcast(void *buffer, int count, $/;"	p	class:Comm	access:public	signature:(void *buffer, int count, const Datatype& datatype, int root) const
Bcast	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bcast(void *buffer, int count, $/;"	f	class:MPI::Comm	signature:(void *buffer, int count, const MPI::Datatype& datatype, int root) const
Bsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Bsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Bsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Bsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Bsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Bsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
CART	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int CART = MPI_CART;$/;"	v
COMBINER_CONTIGUOUS	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_CONTIGUOUS = MPI_COMBINER_CONTIGUOUS;$/;"	v
COMBINER_DARRAY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_DARRAY = MPI_COMBINER_DARRAY;$/;"	v
COMBINER_DUP	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_DUP = MPI_COMBINER_DUP;$/;"	v
COMBINER_F90_COMPLEX	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_COMPLEX = MPI_COMBINER_F90_COMPLEX;$/;"	v
COMBINER_F90_INTEGER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_INTEGER = MPI_COMBINER_F90_INTEGER;$/;"	v
COMBINER_F90_REAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_REAL = MPI_COMBINER_F90_REAL;$/;"	v
COMBINER_HINDEXED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HINDEXED = MPI_COMBINER_HINDEXED;$/;"	v
COMBINER_HINDEXED_INTEGER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HINDEXED_INTEGER = MPI_COMBINER_HINDEXED_INTEGER;$/;"	v
COMBINER_HVECTOR	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HVECTOR = MPI_COMBINER_HVECTOR;$/;"	v
COMBINER_HVECTOR_INTEGER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HVECTOR_INTEGER = MPI_COMBINER_HVECTOR_INTEGER;$/;"	v
COMBINER_INDEXED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_INDEXED = MPI_COMBINER_INDEXED;$/;"	v
COMBINER_INDEXED_BLOCK	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_INDEXED_BLOCK = MPI_COMBINER_INDEXED_BLOCK;$/;"	v
COMBINER_NAMED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_NAMED = MPI_COMBINER_NAMED;$/;"	v
COMBINER_RESIZED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_RESIZED = MPI_COMBINER_RESIZED;$/;"	v
COMBINER_STRUCT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_STRUCT = MPI_COMBINER_STRUCT;$/;"	v
COMBINER_STRUCT_INTEGER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_STRUCT_INTEGER = MPI_COMBINER_STRUCT_INTEGER;$/;"	v
COMBINER_SUBARRAY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_SUBARRAY = MPI_COMBINER_SUBARRAY;$/;"	v
COMBINER_VECTOR	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_VECTOR = MPI_COMBINER_VECTOR;$/;"	v
CONGRUENT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int CONGRUENT = MPI_CONGRUENT;$/;"	v
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:Comm	access:public	signature:(int errorcode) const
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Comm	signature:(int errorcode) const
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:File	access:public	signature:(int errorcode) const
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Call_errhandler(int errorcode) const$/;"	f	class:MPI::File	signature:(int errorcode) const
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Call_errhandler(int errorcode) const;$/;"	p	class:Win	access:public	signature:(int errorcode) const
Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Win	signature:(int errorcode) const
Cancel	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Cancel(void) const;$/;"	p	class:Request	access:public	signature:(void) const
Cancel	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Cancel(void) const$/;"	f	class:MPI::Request	signature:(void) const
Cancel_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Cancel_function(void *, bool);$/;"	t	class:Grequest	access:public
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm() { }$/;"	f	class:Cartcomm	access:public	signature:()
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Cartcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  inline Cartcomm(const MPI_Comm& data);$/;"	p	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^class Cartcomm : public Intracomm {$/;"	c	inherits:Intracomm
Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Cartcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Cartcomm	signature:(const MPI_Comm& data)
Cartcomm::Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm() { }$/;"	f	class:Cartcomm	access:public	signature:()
Cartcomm::Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Cartcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm::Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm::Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  inline Cartcomm(const MPI_Comm& data);$/;"	p	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Cartcomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm& Clone() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm Dup() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Get_cart_rank	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_cart_rank(const int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const int coords[]) const
Cartcomm::Get_coords	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_coords(int rank, int maxdims, int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int rank, int maxdims, int coords[]) const
Cartcomm::Get_dim	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_dim() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxdims, int dims[], bool periods[],$/;"	p	class:Cartcomm	access:public	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Cartcomm::Map	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int ndims, const int dims[], const bool periods[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int ndims, const int dims[], const bool periods[]) const
Cartcomm::Shift	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Shift(int direction, int disp,$/;"	p	class:Cartcomm	access:public	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Cartcomm::Sub	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm Sub(const bool remain_dims[]);$/;"	p	class:Cartcomm	access:public	signature:(const bool remain_dims[])
Cartcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Cartcomm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Comm_Null& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Clone	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Comm& Clone() const = 0;$/;"	p	class:Comm	access:public	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm& Clone() const;$/;"	p	class:Intercomm	access:public	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Clone() const$/;"	f	class:MPI::Intercomm	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intracomm& Clone() const;$/;"	p	class:Intracomm	access:public	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Clone() const$/;"	f	class:MPI::Intracomm	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm& Clone() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Graphcomm& Clone() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Clone() const$/;"	f	class:MPI::Cartcomm	signature:() const
Clone	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Clone() const$/;"	f	class:MPI::Graphcomm	signature:() const
Close	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Close();$/;"	p	class:File	access:public	signature:()
Close_port	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Close_port(const char* port_name);$/;"	p	signature:(const char* port_name)
Close_port	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Close_port(const char* port_name) $/;"	f	class:MPI	signature:(const char* port_name)
Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm();$/;"	p	class:Comm	access:public	signature:()
Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(MPI_Comm data) : Comm_Null(data) { }$/;"	f	class:Comm	access:public	signature:(MPI_Comm data)
Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm& data) : Comm_Null(data.mpi_comm) { }$/;"	f	class:Comm	access:public	signature:(const Comm& data)
Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm_Null& data);$/;"	p	class:Comm	access:public	signature:(const Comm_Null& data)
Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^class Comm : public Comm_Null {$/;"	c	inherits:Comm_Null
Comm::Abort	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Abort(int errorcode);$/;"	p	class:Comm	access:public	signature:(int errorcode)
Comm::Allgather	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allgather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Comm::Allgatherv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allgatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype) const
Comm::Allreduce	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Comm::Alltoall	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoall(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Comm::Alltoallv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype & recvtype) const
Comm::Alltoallw	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype recvtypes[]) const
Comm::Barrier	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Barrier() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Bcast	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Bcast(void *buffer, int count, $/;"	p	class:Comm	access:public	signature:(void *buffer, int count, const Datatype& datatype, int root) const
Comm::Bsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Bsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Bsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Bsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:Comm	access:public	signature:(int errorcode) const
Comm::Clone	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Comm& Clone() const = 0;$/;"	p	class:Comm	access:public	signature:() const
Comm::Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm();$/;"	p	class:Comm	access:public	signature:()
Comm::Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(MPI_Comm data) : Comm_Null(data) { }$/;"	f	class:Comm	access:public	signature:(MPI_Comm data)
Comm::Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm& data) : Comm_Null(data.mpi_comm) { }$/;"	f	class:Comm	access:public	signature:(const Comm& data)
Comm::Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm_Null& data);$/;"	p	class:Comm	access:public	signature:(const Comm_Null& data)
Comm::Compare	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Compare(const Comm & comm1, const Comm & comm2);$/;"	p	class:Comm	access:public	signature:(const Comm & comm1, const Comm & comm2)
Comm::Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Copy_attr_function(const Comm& oldcomm, int comm_keyval,$/;"	t	class:Comm	access:public
Comm::Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Errhandler Create_errhandler(Comm::Errhandler_fn* function);$/;"	p	class:Comm	access:public	signature:(Comm::Errhandler_fn* function)
Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::DUP_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int DUP_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Comm::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Delete_attr(int comm_keyval);$/;"	p	class:Comm	access:public	signature:(int comm_keyval)
Comm::Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Delete_attr_function(Comm& comm, int comm_keyval, $/;"	t	class:Comm	access:public
Comm::Disconnect	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Disconnect();$/;"	p	class:Comm	access:public	signature:()
Comm::Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef void Errhandler_fn(Comm&, int*, ...);$/;"	t	class:Comm	access:public
Comm::Free	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Free(void);$/;"	p	class:Comm	access:public	signature:(void)
Comm::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static void Free_keyval(int& comm_keyval);$/;"	p	class:Comm	access:public	signature:(int& comm_keyval)
Comm::Gather	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Gather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Gatherv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Gatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype, int root) const
Comm::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Get_attr(int comm_keyval, void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, void* attribute_val) const
Comm::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Errhandler Get_errhandler() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_group	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Group Get_group() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_name	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Get_name(char * comm_name, int& resultlen) const;$/;"	p	class:Comm	access:public	signature:(char * comm_name, int& resultlen) const
Comm::Get_parent	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Get_parent();$/;"	p	class:Comm	access:public	signature:()
Comm::Get_rank	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_rank() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_size	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_size() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_topology	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_topology() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Ibsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Ibsend(const void *buf, int count, const$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Comm::Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Comm::Irecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irecv(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Irsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Is_inter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Is_inter() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Isend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Isend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Issend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Issend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Join	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Join(const int fd);$/;"	p	class:Comm	access:public	signature:(const int fd)
Comm::NULL_COPY_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_COPY_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Comm::NULL_DELETE_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_DELETE_FN(Comm& comm, int comm_keyval, void* attribute_val,$/;"	p	class:Comm	access:public	signature:(Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
Comm::Probe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Comm::Probe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Comm::Recv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Recv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag, Status & status) const
Comm::Recv_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Recv_init(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Reduce	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op, int root) const
Comm::Reduce_scatter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const Datatype & datatype, const Op & op) const
Comm::Rsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Rsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Rsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Rsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Scatter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Scatter(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Scatterv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Scatterv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Send	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Send(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Send_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Send_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag) const
Comm::Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag, Status & status) const
Comm::Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Comm::Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag, Status & status) const
Comm::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_attr(int comm_keyval, const void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, const void* attribute_val) const
Comm::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_errhandler(const Errhandler& errhandler) const;$/;"	p	class:Comm	access:public	signature:(const Errhandler& errhandler) const
Comm::Set_name	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_name(const char* comm_name);$/;"	p	class:Comm	access:public	signature:(const char* comm_name)
Comm::Ssend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Ssend(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Ssend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Ssend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Comm	access:public
Comm::do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int do_create_keyval(MPI_Comm_copy_attr_function* c_copy_fn,$/;"	p	class:Comm	access:protected	signature:(MPI_Comm_copy_attr_function* c_copy_fn, MPI_Comm_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Comm::keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Comm	access:public
Comm::keyval_intercept_data_t::c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_copy_attr_function *c_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_delete_attr_function *c_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::extra_state	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        void *extra_state;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
CommType	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	g
Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null() : mpi_comm(MPI_COMM_NULL) { }$/;"	f	class:Comm_Null	access:public	signature:()
Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(MPI_Comm data) : mpi_comm(data) { }$/;"	f	class:Comm_Null	access:public	signature:(MPI_Comm data)
Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(const Comm_Null& data) : mpi_comm(data.mpi_comm) { }$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data)
Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^class Comm_Null {$/;"	c
Comm_Null::Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null() : mpi_comm(MPI_COMM_NULL) { }$/;"	f	class:Comm_Null	access:public	signature:()
Comm_Null::Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(MPI_Comm data) : mpi_comm(data) { }$/;"	f	class:Comm_Null	access:public	signature:(MPI_Comm data)
Comm_Null::Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(const Comm_Null& data) : mpi_comm(data.mpi_comm) { }$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data)
Comm_Null::mpi_comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  MPI_Comm mpi_comm;$/;"	m	class:Comm_Null	access:protected
Comm_Null::operator !=	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator!=(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
Comm_Null::operator ==	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator==(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
Comm_Null::operator MPI_Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline operator MPI_Comm() const { return mpi_comm; }$/;"	f	class:Comm_Null	access:public	signature:() const
Comm_Null::~Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual inline ~Comm_Null() { }$/;"	f	class:Comm_Null	access:public	signature:()
Commit	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Commit();$/;"	p	class:Datatype	access:public	signature:()
Commit	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Commit() $/;"	f	class:MPI::Datatype	signature:()
Compare	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Compare(const Comm & comm1, const Comm & comm2);$/;"	p	class:Comm	access:public	signature:(const Comm & comm1, const Comm & comm2)
Compare	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Compare(const MPI::Comm & comm1,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm & comm1, const MPI::Comm & comm2)
Compare	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static int Compare(const Group& group1, const Group& group2);$/;"	p	class:Group	access:public	signature:(const Group& group1, const Group& group2)
Compare	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Compare(const MPI::Group& group1, const MPI::Group& group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, const MPI::Group& group2)
Complete	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    virtual void Complete();$/;"	p	class:Grequest	access:public	signature:()
Complete	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Complete()$/;"	f	class:MPI::Grequest	signature:()
Complete	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Complete() const;$/;"	p	class:Win	access:public	signature:() const
Complete	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Complete() const $/;"	f	class:MPI::Win	signature:() const
Compute_dims	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Compute_dims(int nnodes, int ndims, int dims[]);$/;"	p	signature:(int nnodes, int ndims, int dims[])
Compute_dims	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Compute_dims(int nnodes, int ndims, int dims[])$/;"	f	class:MPI	signature:(int nnodes, int ndims, int dims[])
Connect	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Connect(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Connect	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Connect(const char* port_name,$/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Copy_attr_function(const Comm& oldcomm, int comm_keyval,$/;"	t	class:Comm	access:public
Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Copy_attr_function(const Datatype& oldtype,$/;"	t	class:Datatype	access:public
Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef int Copy_attr_function(const Win& oldwin, int win_keyval, $/;"	t	class:Win	access:public
Create	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  static Info Create();$/;"	p	class:Info	access:public	signature:()
Create	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Create()$/;"	f	class:MPI::Info	signature:()
Create	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Create(const Group& group) const;$/;"	p	class:Intercomm	access:public	signature:(const Group& group) const
Create	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Create(const Group& group) const$/;"	f	class:MPI::Intercomm	signature:(const Group& group) const
Create	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create(const Group& group) const;$/;"	p	class:Intracomm	access:public	signature:(const Group& group) const
Create	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create(const MPI::Group& group) const$/;"	f	class:MPI::Intracomm	signature:(const MPI::Group& group) const
Create	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static  Win Create(const void* base, MPI::Aint size, int disp_unit, $/;"	p	class:Win	access:public	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Create	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create(const void* base, MPI::Aint size, $/;"	f	class:MPI::Win	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Create_cart	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_cart(int ndims, const int dims[],$/;"	p	class:Intracomm	access:public	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Create_cart	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_cart(int ndims, const int dims[],$/;"	f	class:MPI::Intracomm	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Create_contiguous	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_contiguous(int count) const;$/;"	p	class:Datatype	access:public	signature:(int count) const
Create_contiguous	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_contiguous(int count) const$/;"	f	class:MPI::Datatype	signature:(int count) const
Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Errhandler Create_errhandler(Comm::Errhandler_fn* function);$/;"	p	class:Comm	access:public	signature:(Comm::Errhandler_fn* function)
Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_fn* function); $/;"	p	class:File	access:public	signature:(Errhandler_fn* function)
Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_fn* function);$/;"	p	class:Win	access:public	signature:(Errhandler_fn* function)
Create_graph	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_graph(int nnodes, const int index[],$/;"	p	class:Intracomm	access:public	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Create_graph	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_graph(int nnodes, const int index[],$/;"	f	class:MPI::Intracomm	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Create_hindexed	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[]) const
Create_hindexed	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hindexed(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[]) const
Create_hvector	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hvector(int count, int blocklength, Aint stride) const;$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, Aint stride) const
Create_hvector	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hvector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, MPI::Aint stride) const
Create_indexed	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed(int count,$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Create_indexed	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed(int count,$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Create_indexed_block	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed_block(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, const int array_of_blocklengths[]) const
Create_indexed_block	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed_block(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, const int array_of_displacements[]) const
Create_intercomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_intercomm(int local_leader, const Comm& peer_comm,$/;"	p	class:Intracomm	access:public	signature:(int local_leader, const Comm& peer_comm, int remote_leader, int tag) const
Create_intercomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_intercomm(int local_leader,$/;"	f	class:MPI::Intracomm	signature:(int local_leader, const MPI::Comm& peer_comm, int remote_leader, int tag) const
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_resized	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_resized(const Aint lb, const Aint extent) const;$/;"	p	class:Datatype	access:public	signature:(const Aint lb, const Aint extent) const
Create_resized	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_resized(const MPI::Aint lb, const MPI::Aint extent) const$/;"	f	class:MPI::Datatype	signature:(const MPI::Aint lb, const MPI::Aint extent) const
Create_struct	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_struct(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[], const Datatype array_if_types[])
Create_struct	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_struct(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[], const MPI::Datatype array_of_types[])
Create_subarray	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_subarray(int ndims, const int array_of_sizes[],$/;"	p	class:Datatype	access:public	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Create_subarray	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[],$/;"	f	class:MPI::Datatype	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Create_vector	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_vector(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, int stride) const
Create_vector	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_vector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, int stride) const
DISPLACEMENT_CURRENT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int DISPLACEMENT_CURRENT = MPI_DISPLACEMENT_CURRENT;$/;"	v
DISTRIBUTE_BLOCK	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_BLOCK = MPI_DISTRIBUTE_BLOCK;$/;"	v
DISTRIBUTE_CYCLIC	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_CYCLIC = MPI_DISTRIBUTE_CYCLIC;$/;"	v
DISTRIBUTE_DFLT_DARG	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_DFLT_DARG = MPI_DISTRIBUTE_DFLT_DARG;$/;"	v
DISTRIBUTE_NONE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_NONE = MPI_DISTRIBUTE_NONE;$/;"	v
DUP_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int DUP_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
DUP_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::DUP_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Datarep_conversion_function	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^typedef void Datarep_conversion_function(void* userbuf, Datatype& datatype, $/;"	t
Datarep_extent_function	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^typedef void Datarep_extent_function(const Datatype& datatype, $/;"	t
Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype() : mpi_datatype(MPI_DATATYPE_NULL) { }$/;"	f	class:Datatype	access:public	signature:()
Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(MPI_Datatype i) : mpi_datatype(i) { }$/;"	f	class:Datatype	access:public	signature:(MPI_Datatype i)
Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(const Datatype& dt) : mpi_datatype(dt.mpi_datatype) { }$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^class Datatype {$/;"	c
Datatype::Commit	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Commit();$/;"	p	class:Datatype	access:public	signature:()
Datatype::Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Copy_attr_function(const Datatype& oldtype,$/;"	t	class:Datatype	access:public
Datatype::Create_contiguous	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_contiguous(int count) const;$/;"	p	class:Datatype	access:public	signature:(int count) const
Datatype::Create_hindexed	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[]) const
Datatype::Create_hvector	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hvector(int count, int blocklength, Aint stride) const;$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, Aint stride) const
Datatype::Create_indexed	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed(int count,$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Datatype::Create_indexed_block	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed_block(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, const int array_of_blocklengths[]) const
Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_resized	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_resized(const Aint lb, const Aint extent) const;$/;"	p	class:Datatype	access:public	signature:(const Aint lb, const Aint extent) const
Datatype::Create_struct	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_struct(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[], const Datatype array_if_types[])
Datatype::Create_subarray	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_subarray(int ndims, const int array_of_sizes[],$/;"	p	class:Datatype	access:public	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Datatype::Create_vector	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_vector(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, int stride) const
Datatype::Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype() : mpi_datatype(MPI_DATATYPE_NULL) { }$/;"	f	class:Datatype	access:public	signature:()
Datatype::Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(MPI_Datatype i) : mpi_datatype(i) { }$/;"	f	class:Datatype	access:public	signature:(MPI_Datatype i)
Datatype::Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(const Datatype& dt) : mpi_datatype(dt.mpi_datatype) { }$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Delete_attr(int type_keyval);$/;"	p	class:Datatype	access:public	signature:(int type_keyval)
Datatype::Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Delete_attr_function(Datatype& type, int type_keyval, $/;"	t	class:Datatype	access:public
Datatype::Dup	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Dup() const;$/;"	p	class:Datatype	access:public	signature:() const
Datatype::Free	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Free();$/;"	p	class:Datatype	access:public	signature:()
Datatype::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static void Free_keyval(int& type_keyval);$/;"	p	class:Datatype	access:public	signature:(int& type_keyval)
Datatype::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual bool Get_attr(int type_keyval, void* attribute_val) const;$/;"	p	class:Datatype	access:public	signature:(int type_keyval, void* attribute_val) const
Datatype::Get_contents	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_contents(int max_integers, int max_addresses,$/;"	p	class:Datatype	access:public	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], Aint array_of_addresses[], Datatype array_of_datatypes[]) const
Datatype::Get_envelope	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_envelope(int& num_integers, int& num_addresses,$/;"	p	class:Datatype	access:public	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Datatype::Get_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_extent(Aint& lb, Aint& extent) const;$/;"	p	class:Datatype	access:public	signature:(Aint& lb, Aint& extent) const
Datatype::Get_name	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_name(char* type_name, int& resultlen) const;$/;"	p	class:Datatype	access:public	signature:(char* type_name, int& resultlen) const
Datatype::Get_size	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Get_size() const;$/;"	p	class:Datatype	access:public	signature:() const
Datatype::Get_true_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_true_extent(Aint&, Aint&) const;$/;"	p	class:Datatype	access:public	signature:(Aint&, Aint&) const
Datatype::Pack	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack(const void* inbuf, int incount, void *outbuf, $/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const Comm &comm) const
Datatype::Pack_size	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Pack_size(int incount, const Comm& comm) const;$/;"	p	class:Datatype	access:public	signature:(int incount, const Comm& comm) const
Datatype::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_attr(int type_keyval, const void* attribute_val);$/;"	p	class:Datatype	access:public	signature:(int type_keyval, const void* attribute_val)
Datatype::Set_name	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_name(const char* type_name);$/;"	p	class:Datatype	access:public	signature:(const char* type_name)
Datatype::Unpack	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack(const void* inbuf, int insize, void *outbuf, int outcount,$/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const Comm& comm) const
Datatype::cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Datatype	access:public
Datatype::do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int do_create_keyval(MPI_Type_copy_attr_function* c_copy_fn,$/;"	p	class:Datatype	access:protected	signature:(MPI_Type_copy_attr_function* c_copy_fn, MPI_Type_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Datatype::keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Datatype	access:public
Datatype::keyval_intercept_data_t::c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_copy_attr_function *c_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_delete_attr_function *c_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::extra_state	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        void *extra_state;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::mpi_datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  MPI_Datatype mpi_datatype;$/;"	m	class:Datatype	access:protected
Datatype::operator !=	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator!= (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
Datatype::operator =	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator= (const MPI_Datatype &i) $/;"	f	class:Datatype	access:public	signature:(const MPI_Datatype &i)
Datatype::operator =	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator=(const Datatype& dt) {$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype::operator ==	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator== (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
Datatype::operator MPI_Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline operator MPI_Datatype () const { return mpi_datatype; }$/;"	f	class:Datatype	access:public	signature:() const
Datatype::~Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline virtual ~Datatype() {}$/;"	f	class:Datatype	access:public	signature:()
Delete	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static void Delete(const char* filename, const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const char* filename, const MPI::Info& info)
Delete	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Delete(const char* filename, const MPI::Info& info) $/;"	f	class:MPI::File	signature:(const char* filename, const MPI::Info& info)
Delete	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Delete(const char* key);$/;"	p	class:Info	access:public	signature:(const char* key)
Delete	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Delete(const char* key)$/;"	f	class:MPI::Info	signature:(const char* key)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Delete_attr(int comm_keyval);$/;"	p	class:Comm	access:public	signature:(int comm_keyval)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Delete_attr(int comm_keyval)$/;"	f	class:MPI::Comm	signature:(int comm_keyval)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Delete_attr(int type_keyval);$/;"	p	class:Datatype	access:public	signature:(int type_keyval)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Delete_attr(int type_keyval)$/;"	f	class:MPI::Datatype	signature:(int type_keyval)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Delete_attr(int win_keyval);$/;"	p	class:Win	access:public	signature:(int win_keyval)
Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Delete_attr(int win_keyval) $/;"	f	class:MPI::Win	signature:(int win_keyval)
Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Delete_attr_function(Comm& comm, int comm_keyval, $/;"	t	class:Comm	access:public
Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Delete_attr_function(Datatype& type, int type_keyval, $/;"	t	class:Datatype	access:public
Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef int Delete_attr_function(Win& win, int win_keyval, $/;"	t	class:Win	access:public
Detach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Detach_buffer(void*& buffer);$/;"	p	signature:(void*& buffer)
Detach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Detach_buffer(void*& buffer)$/;"	f	class:MPI	signature:(void*& buffer)
Difference	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Difference(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Difference	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Difference(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Disconnect	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Disconnect();$/;"	p	class:Comm	access:public	signature:()
Disconnect	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Disconnect()$/;"	f	class:MPI::Comm	signature:()
Dup	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Dup() const;$/;"	p	class:Datatype	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Dup() const$/;"	f	class:MPI::Datatype	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual Info Dup() const; $/;"	p	class:Info	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Dup() const$/;"	f	class:MPI::Info	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm Dup() const;$/;"	p	class:Intercomm	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Dup() const$/;"	f	class:MPI::Intercomm	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm Dup() const;$/;"	p	class:Intracomm	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Dup() const$/;"	f	class:MPI::Intracomm	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm Dup() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm Dup() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Dup() const$/;"	f	class:MPI::Cartcomm	signature:() const
Dup	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Dup() const$/;"	f	class:MPI::Graphcomm	signature:() const
ERR_ARG	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ARG = MPI_ERR_ARG;$/;"	v
ERR_BASE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_BASE = MPI_ERR_BASE;$/;"	v
ERR_BUFFER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_BUFFER = MPI_ERR_BUFFER;$/;"	v
ERR_COMM	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_COMM = MPI_ERR_COMM;$/;"	v
ERR_COUNT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_COUNT = MPI_ERR_COUNT;$/;"	v
ERR_DIMS	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_DIMS = MPI_ERR_DIMS;$/;"	v
ERR_GROUP	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_GROUP = MPI_ERR_GROUP;$/;"	v
ERR_INFO_KEY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_KEY = MPI_ERR_INFO_KEY;$/;"	v
ERR_INFO_NOKEY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_NOKEY = MPI_ERR_INFO_NOKEY;$/;"	v
ERR_INFO_VALUE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_VALUE = MPI_ERR_INFO_VALUE;$/;"	v
ERR_INTERN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INTERN = MPI_ERR_INTERN;$/;"	v
ERR_IN_STATUS	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_IN_STATUS = MPI_ERR_IN_STATUS;$/;"	v
ERR_KEYVAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_KEYVAL = MPI_ERR_KEYVAL;$/;"	v
ERR_LASTCODE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_LASTCODE = MPI_ERR_LASTCODE;$/;"	v
ERR_NAME	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NAME = MPI_ERR_NAME;$/;"	v
ERR_NO_MEM	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NO_MEM = MPI_ERR_NO_MEM;$/;"	v
ERR_OP	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_OP = MPI_ERR_OP;$/;"	v
ERR_OTHER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_OTHER = MPI_ERR_OTHER;$/;"	v
ERR_PENDING	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_PENDING = MPI_ERR_PENDING;$/;"	v
ERR_RANK	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_RANK = MPI_ERR_RANK;$/;"	v
ERR_REQUEST	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_REQUEST = MPI_ERR_REQUEST;$/;"	v
ERR_ROOT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ROOT = MPI_ERR_ROOT;$/;"	v
ERR_SERVICE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_SERVICE = MPI_ERR_SERVICE;$/;"	v
ERR_SPAWN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_SPAWN = MPI_ERR_SPAWN;$/;"	v
ERR_TAG	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TAG  = MPI_ERR_TAG ;$/;"	v
ERR_TOPOLOGY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TOPOLOGY = MPI_ERR_TOPOLOGY;$/;"	v
ERR_TRUNCATE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TRUNCATE = MPI_ERR_TRUNCATE;$/;"	v
ERR_TYPE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TYPE = MPI_ERR_TYPE;$/;"	v
ERR_UNKNOWN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_UNKNOWN = MPI_ERR_UNKNOWN;$/;"	v
ERR_WIN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_WIN = MPI_ERR_WIN;$/;"	v
Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler()$/;"	f	class:Errhandler	access:public	signature:()
Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(MPI_Errhandler i)$/;"	f	class:Errhandler	access:public	signature:(MPI_Errhandler i)
Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(const Errhandler& e) : mpi_errhandler(e.mpi_errhandler) { }$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^class Errhandler {$/;"	c
Errhandler::Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler()$/;"	f	class:Errhandler	access:public	signature:()
Errhandler::Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(MPI_Errhandler i)$/;"	f	class:Errhandler	access:public	signature:(MPI_Errhandler i)
Errhandler::Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(const Errhandler& e) : mpi_errhandler(e.mpi_errhandler) { }$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler::Free	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  virtual void Free();$/;"	p	class:Errhandler	access:public	signature:()
Errhandler::mpi_errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  MPI_Errhandler mpi_errhandler;$/;"	m	class:Errhandler	access:private
Errhandler::operator !=	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator!=(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
Errhandler::operator =	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator= (const MPI_Errhandler &i) {$/;"	f	class:Errhandler	access:public	signature:(const MPI_Errhandler &i)
Errhandler::operator =	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator=(const Errhandler& e) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler::operator ==	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator==(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
Errhandler::operator MPI_Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline operator MPI_Errhandler() const { return mpi_errhandler; }$/;"	f	class:Errhandler	access:public	signature:() const
Errhandler::~Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline virtual ~Errhandler() { }$/;"	f	class:Errhandler	access:public	signature:()
Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  typedef void Errhandler_fn(Comm&, int*, ...);$/;"	t	class:Comm	access:public
Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  typedef void Errhandler_fn(MPI::File &, int *, ... );$/;"	t	class:File	access:public
Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef void Errhandler_fn(Win &, int *, ... );$/;"	t	class:Win	access:public
Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(const Exception& a)$/;"	f	class:Exception	access:public	signature:(const Exception& a)
Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(int ec) : error_code(ec), error_string(0), error_class(-1) {$/;"	f	class:Exception	access:public	signature:(int ec)
Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^class Exception {$/;"	c
Exception::Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(const Exception& a)$/;"	f	class:Exception	access:public	signature:(const Exception& a)
Exception::Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(int ec) : error_code(ec), error_string(0), error_class(-1) {$/;"	f	class:Exception	access:public	signature:(int ec)
Exception::Get_error_class	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_class() const { return error_class; }$/;"	f	class:Exception	access:public	signature:() const
Exception::Get_error_code	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_code() const { return error_code; }$/;"	f	class:Exception	access:public	signature:() const
Exception::Get_error_string	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline const char* Get_error_string() const { return error_string; }$/;"	f	class:Exception	access:public	signature:() const
Exception::error_class	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  int error_class;$/;"	m	class:Exception	access:protected
Exception::error_code	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  int error_code;$/;"	m	class:Exception	access:protected
Exception::error_string	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  char* error_string;$/;"	m	class:Exception	access:protected
Exception::~Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline ~Exception() {$/;"	f	class:Exception	access:public	signature:()
Excl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Excl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Excl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Excl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
Exscan	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Exscan	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
Fence	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Fence(int assert) const;$/;"	p	class:Win	access:public	signature:(int assert) const
Fence	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Fence(int assert) const $/;"	f	class:MPI::Win	signature:(int assert) const
File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File() : mpi_file(MPI_FILE_NULL) { }$/;"	f	class:File	access:public	signature:()
File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File(MPI_File i) : mpi_file(i) { }$/;"	f	class:File	access:public	signature:(MPI_File i)
File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File(const File& data) : mpi_file(data.mpi_file) { }$/;"	f	class:File	access:public	signature:(const File& data)
File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^class File {$/;"	c
File::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:File	access:public	signature:(int errorcode) const
File::Close	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Close();$/;"	p	class:File	access:public	signature:()
File::Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_fn* function); $/;"	p	class:File	access:public	signature:(Errhandler_fn* function)
File::Delete	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static void Delete(const char* filename, const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const char* filename, const MPI::Info& info)
File::Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  typedef void Errhandler_fn(MPI::File &, int *, ... );$/;"	t	class:File	access:public
File::File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File() : mpi_file(MPI_FILE_NULL) { }$/;"	f	class:File	access:public	signature:()
File::File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File(MPI_File i) : mpi_file(i) { }$/;"	f	class:File	access:public	signature:(MPI_File i)
File::File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File(const File& data) : mpi_file(data.mpi_file) { }$/;"	f	class:File	access:public	signature:(const File& data)
File::Get_amode	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  int Get_amode() const;$/;"	p	class:File	access:public	signature:() const
File::Get_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  bool Get_atomicity() const;$/;"	p	class:File	access:public	signature:() const
File::Get_byte_offset	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_byte_offset(const MPI::Offset disp) const;$/;"	p	class:File	access:public	signature:(const MPI::Offset disp) const
File::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Errhandler Get_errhandler() const;$/;"	p	class:File	access:public	signature:() const
File::Get_group	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Group Get_group() const;$/;"	p	class:File	access:public	signature:() const
File::Get_info	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Info Get_info() const;$/;"	p	class:File	access:public	signature:() const
File::Get_position	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position() const;$/;"	p	class:File	access:public	signature:() const
File::Get_position_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position_shared() const;$/;"	p	class:File	access:public	signature:() const
File::Get_size	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_size() const;$/;"	p	class:File	access:public	signature:() const
File::Get_type_extent	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Aint Get_type_extent(const MPI::Datatype& datatype) const;$/;"	p	class:File	access:public	signature:(const MPI::Datatype& datatype) const
File::Get_view	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Get_view(MPI::Offset& disp, MPI::Datatype& etype, $/;"	p	class:File	access:public	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
File::Iread	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread(void* buf, int count, $/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Iread_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_at(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Iread_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_at(MPI::Offset offset, const void* buf, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Open	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static MPI::File Open(const MPI::Intracomm& comm,$/;"	p	class:File	access:public	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
File::Preallocate	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Preallocate(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
File::Read	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_begin(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Seek	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Seek(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
File::Seek_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Seek_shared(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
File::Set_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_atomicity(bool flag);$/;"	p	class:File	access:public	signature:(bool flag)
File::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:File	access:public	signature:(const MPI::Errhandler& errhandler) const
File::Set_info	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_info(const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const MPI::Info& info)
File::Set_size	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_size(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
File::Set_view	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_view(MPI::Offset disp,  const MPI::Datatype& etype,$/;"	p	class:File	access:public	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
File::Sync	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Sync();$/;"	p	class:File	access:public	signature:()
File::Write	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_begin(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_begin(MPI::Offset offset, const void* buf,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_begin(const void* buf, int count, $/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::mpi_file	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI_File mpi_file;$/;"	m	class:File	access:protected
File::operator =	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File& operator= (const MPI_File &i) {$/;"	f	class:File	access:public	signature:(const MPI_File &i)
File::operator =	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File& operator=(const File& data) {$/;"	f	class:File	access:public	signature:(const File& data)
File::operator MPI_File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  operator MPI_File () const { return mpi_file; }$/;"	f	class:File	access:public	signature:() const
File::~File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  virtual ~File() { }$/;"	f	class:File	access:public	signature:()
Finalize	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Finalize();$/;"	p	signature:()
Finalize	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Finalize()$/;"	f	class:MPI	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Free(void);$/;"	p	class:Comm	access:public	signature:(void)
Free	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free(void) $/;"	f	class:MPI::Comm	signature:(void)
Free	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Free();$/;"	p	class:Datatype	access:public	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  virtual void Free();$/;"	p	class:Errhandler	access:public	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/errhandler_inln.h	/^MPI::Errhandler::Free()$/;"	f	class:MPI::Errhandler	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual void Free();$/;"	p	class:Group	access:public	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Free()$/;"	f	class:MPI::Group	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Free();$/;"	p	class:Info	access:public	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Free()$/;"	f	class:MPI::Info	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual void Free();$/;"	p	class:Op	access:public	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Free()$/;"	f	class:MPI::Op	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Free(void);$/;"	p	class:Request	access:public	signature:(void)
Free	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Free() $/;"	f	class:MPI::Request	signature:()
Free	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Free(); $/;"	p	class:Win	access:public	signature:()
Free_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Free_function(void *);$/;"	t	class:Grequest	access:public
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static void Free_keyval(int& comm_keyval);$/;"	p	class:Comm	access:public	signature:(int& comm_keyval)
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free_keyval(int& comm_keyval)$/;"	f	class:MPI::Comm	signature:(int& comm_keyval)
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static void Free_keyval(int& type_keyval);$/;"	p	class:Datatype	access:public	signature:(int& type_keyval)
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Free_keyval(int& type_keyval)$/;"	f	class:MPI::Datatype	signature:(int& type_keyval)
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static void Free_keyval(int& win_keyval); $/;"	p	class:Win	access:public	signature:(int& win_keyval)
Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Free_keyval(int& win_keyval)$/;"	f	class:MPI::Win	signature:(int& win_keyval)
Free_mem	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Free_mem(void* base);$/;"	p	signature:(void* base)
Free_mem	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Free_mem(void* base)$/;"	f	class:MPI	signature:(void* base)
GRAPH	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int GRAPH = MPI_GRAPH;$/;"	v
Gather	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Gather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Gather	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Gatherv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Gatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype, int root) const
Gatherv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype, int root) const
Get	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get(const char* key, int valuelen, char* value) const;$/;"	p	class:Info	access:public	signature:(const char* key, int valuelen, char* value) const
Get	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get(const char* key, int valuelen, char* value) const$/;"	f	class:MPI::Info	signature:(const char* key, int valuelen, char* value) const
Get	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get(const void *origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Get	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get(const void *origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Get_address	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Get_address(void* location);$/;"	p	signature:(void* location)
Get_address	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_address(void* location)$/;"	f	class:MPI	signature:(void* location)
Get_amode	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  int Get_amode() const;$/;"	p	class:File	access:public	signature:() const
Get_amode	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_amode() const $/;"	f	class:MPI::File	signature:() const
Get_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  bool Get_atomicity() const;$/;"	p	class:File	access:public	signature:() const
Get_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_atomicity() const $/;"	f	class:MPI::File	signature:() const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Get_attr(int comm_keyval, void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual bool Get_attr(int type_keyval, void* attribute_val) const;$/;"	p	class:Datatype	access:public	signature:(int type_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_attr(int type_keyval,$/;"	f	class:MPI::Datatype	signature:(int type_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(const Win& win, int win_keyval,$/;"	p	class:Win	access:public	signature:(const Win& win, int win_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(int win_keyval, void* attribute_val) const;$/;"	p	class:Win	access:public	signature:(int win_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(const Win& win, int win_keyval,$/;"	f	class:MPI::Win	signature:(const Win& win, int win_keyval, void* attribute_val) const
Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(int win_keyval, void* attribute_val) const$/;"	f	class:MPI::Win	signature:(int win_keyval, void* attribute_val) const
Get_byte_offset	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_byte_offset(const MPI::Offset disp) const;$/;"	p	class:File	access:public	signature:(const MPI::Offset disp) const
Get_byte_offset	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_byte_offset(const MPI::Offset disp) const $/;"	f	class:MPI::File	signature:(const MPI::Offset disp) const
Get_cart_rank	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_cart_rank(const int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const int coords[]) const
Get_cart_rank	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_cart_rank(const int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(const int coords[]) const
Get_contents	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_contents(int max_integers, int max_addresses,$/;"	p	class:Datatype	access:public	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], Aint array_of_addresses[], Datatype array_of_datatypes[]) const
Get_contents	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_contents(int max_integers, int max_addresses,$/;"	f	class:MPI::Datatype	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI::Aint array_of_addresses[], MPI::Datatype array_of_datatypes[]) const
Get_coords	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_coords(int rank, int maxdims, int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int rank, int maxdims, int coords[]) const
Get_coords	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_coords(int rank, int maxdims, int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(int rank, int maxdims, int coords[]) const
Get_count	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_count(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Get_count	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_count(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
Get_dim	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_dim() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Get_dim	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_dim() const $/;"	f	class:MPI::Cartcomm	signature:() const
Get_dims	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_dims(int nnodes[], int nedges[]) const;$/;"	p	class:Graphcomm	access:public	signature:(int nnodes[], int nedges[]) const
Get_dims	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_dims(int nnodes[], int nedges[]) const $/;"	f	class:MPI::Graphcomm	signature:(int nnodes[], int nedges[]) const
Get_elements	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_elements(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Get_elements	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_elements(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
Get_envelope	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_envelope(int& num_integers, int& num_addresses,$/;"	p	class:Datatype	access:public	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Get_envelope	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_envelope(int& num_integers, int& num_addresses,$/;"	f	class:MPI::Datatype	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Errhandler Get_errhandler() const;$/;"	p	class:Comm	access:public	signature:() const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_errhandler() const$/;"	f	class:MPI::Comm	signature:() const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Errhandler Get_errhandler() const;$/;"	p	class:File	access:public	signature:() const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_errhandler() const$/;"	f	class:MPI::File	signature:() const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Errhandler Get_errhandler() const; $/;"	p	class:Win	access:public	signature:() const
Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win:: Get_errhandler() const $/;"	f	class:MPI::Win	signature:() const
Get_error	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_error() const;$/;"	p	class:Status	access:public	signature:() const
Get_error	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_error() const$/;"	f	class:MPI::Status	signature:() const
Get_error_class	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_class() const { return error_class; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_class	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Get_error_class(int errorcode);$/;"	p	signature:(int errorcode)
Get_error_class	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_class(int errorcode) $/;"	f	class:MPI	signature:(int errorcode)
Get_error_code	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_code() const { return error_code; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_string	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline const char* Get_error_string() const { return error_string; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_string	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Get_error_string(int errorcode, char* string, int& resultlen);$/;"	p	signature:(int errorcode, char* string, int& resultlen)
Get_error_string	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_string(int errorcode, char* string, int& resultlen)$/;"	f	class:MPI	signature:(int errorcode, char* string, int& resultlen)
Get_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_extent(Aint& lb, Aint& extent) const;$/;"	p	class:Datatype	access:public	signature:(Aint& lb, Aint& extent) const
Get_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Group Get_group() const;$/;"	p	class:Comm	access:public	signature:() const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_group() const $/;"	f	class:MPI::Comm	signature:() const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Group Get_group() const;$/;"	p	class:File	access:public	signature:() const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_group() const$/;"	f	class:MPI::File	signature:() const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Group Get_group() const;  $/;"	p	class:Win	access:public	signature:() const
Get_group	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_group() const$/;"	f	class:MPI::Win	signature:() const
Get_info	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Info Get_info() const;$/;"	p	class:File	access:public	signature:() const
Get_info	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_info() const$/;"	f	class:MPI::File	signature:() const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Get_name(char * comm_name, int& resultlen) const;$/;"	p	class:Comm	access:public	signature:(char * comm_name, int& resultlen) const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_name(char* comm_name, int& resultlen) const$/;"	f	class:MPI::Comm	signature:(char* comm_name, int& resultlen) const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_name(char* type_name, int& resultlen) const;$/;"	p	class:Datatype	access:public	signature:(char* type_name, int& resultlen) const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_name(char* type_name, int& resultlen) const$/;"	f	class:MPI::Datatype	signature:(char* type_name, int& resultlen) const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get_name(char* win_name, int& resultlen) const;$/;"	p	class:Win	access:public	signature:(char* win_name, int& resultlen) const
Get_name	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_name(char* win_name, int& resultlen) const$/;"	f	class:MPI::Win	signature:(char* win_name, int& resultlen) const
Get_neighbors	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_neighbors(int rank, int maxneighbors, $/;"	p	class:Graphcomm	access:public	signature:(int rank, int maxneighbors, int neighbors[]) const
Get_neighbors	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors(int rank, int maxneighbors, $/;"	f	class:MPI::Graphcomm	signature:(int rank, int maxneighbors, int neighbors[]) const
Get_neighbors_count	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_neighbors_count(int rank) const;$/;"	p	class:Graphcomm	access:public	signature:(int rank) const
Get_neighbors_count	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors_count(int rank) const $/;"	f	class:MPI::Graphcomm	signature:(int rank) const
Get_nkeys	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual int Get_nkeys() const;$/;"	p	class:Info	access:public	signature:() const
Get_nkeys	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nkeys() const$/;"	f	class:MPI::Info	signature:() const
Get_nthkey	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Get_nthkey(int n, char* key) const;$/;"	p	class:Info	access:public	signature:(int n, char* key) const
Get_nthkey	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nthkey(int n, char* key) const$/;"	f	class:MPI::Info	signature:(int n, char* key) const
Get_parent	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Get_parent();$/;"	p	class:Comm	access:public	signature:()
Get_parent	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_parent()$/;"	f	class:MPI::Comm	signature:()
Get_position	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position() const;$/;"	p	class:File	access:public	signature:() const
Get_position	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position() const$/;"	f	class:MPI::File	signature:() const
Get_position_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position_shared() const;$/;"	p	class:File	access:public	signature:() const
Get_position_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position_shared() const$/;"	f	class:MPI::File	signature:() const
Get_processor_name	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Get_processor_name(char* name, int& resultlen);$/;"	p	signature:(char* name, int& resultlen)
Get_processor_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_processor_name(char* name, int& resultlen)$/;"	f	class:MPI	signature:(char* name, int& resultlen)
Get_rank	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_rank() const;$/;"	p	class:Comm	access:public	signature:() const
Get_rank	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_rank() const $/;"	f	class:MPI::Comm	signature:() const
Get_rank	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_rank() const;$/;"	p	class:Group	access:public	signature:() const
Get_rank	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_rank() const $/;"	f	class:MPI::Group	signature:() const
Get_remote_group	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Group Get_remote_group() const;$/;"	p	class:Intercomm	access:public	signature:() const
Get_remote_group	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_group() const $/;"	f	class:MPI::Intercomm	signature:() const
Get_remote_size	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual int Get_remote_size() const;$/;"	p	class:Intercomm	access:public	signature:() const
Get_remote_size	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_size() const $/;"	f	class:MPI::Intercomm	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_size() const;$/;"	p	class:Comm	access:public	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_size() const $/;"	f	class:MPI::Comm	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Get_size() const;$/;"	p	class:Datatype	access:public	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_size() const $/;"	f	class:MPI::Datatype	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_size() const;$/;"	p	class:File	access:public	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_size() const$/;"	f	class:MPI::File	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_size() const;$/;"	p	class:Group	access:public	signature:() const
Get_size	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_size() const$/;"	f	class:MPI::Group	signature:() const
Get_source	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_source() const;$/;"	p	class:Status	access:public	signature:() const
Get_source	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_source() const$/;"	f	class:MPI::Status	signature:() const
Get_status	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status() const;$/;"	p	class:Request	access:public	signature:() const
Get_status	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status(Status& status) const;$/;"	p	class:Request	access:public	signature:(Status& status) const
Get_status	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status() const$/;"	f	class:MPI::Request	signature:() const
Get_status	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status(MPI::Status& status) const$/;"	f	class:MPI::Request	signature:(MPI::Status& status) const
Get_tag	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_tag() const;$/;"	p	class:Status	access:public	signature:() const
Get_tag	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_tag() const$/;"	f	class:MPI::Status	signature:() const
Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxdims, int dims[], bool periods[],$/;"	p	class:Cartcomm	access:public	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxindex, int maxedges, int index[], $/;"	p	class:Graphcomm	access:public	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_topo(int maxdims, int dims[], bool periods[],$/;"	f	class:MPI::Cartcomm	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_topo(int maxindex, int maxedges, int index[], $/;"	f	class:MPI::Graphcomm	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Get_topology	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_topology() const;$/;"	p	class:Comm	access:public	signature:() const
Get_topology	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_topology() const $/;"	f	class:MPI::Comm	signature:() const
Get_true_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_true_extent(Aint&, Aint&) const;$/;"	p	class:Datatype	access:public	signature:(Aint&, Aint&) const
Get_true_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_true_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
Get_type_extent	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Aint Get_type_extent(const MPI::Datatype& datatype) const;$/;"	p	class:File	access:public	signature:(const MPI::Datatype& datatype) const
Get_type_extent	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_type_extent(const MPI::Datatype& datatype) const$/;"	f	class:MPI::File	signature:(const MPI::Datatype& datatype) const
Get_valuelen	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get_valuelen(const char* key, int& valuelen) const;$/;"	p	class:Info	access:public	signature:(const char* key, int& valuelen) const
Get_valuelen	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_valuelen(const char* key, int& valuelen) const$/;"	f	class:MPI::Info	signature:(const char* key, int& valuelen) const
Get_version	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Get_version(int& version, int& subversion);$/;"	p	signature:(int& version, int& subversion)
Get_version	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_version(int& version, int& subversion)$/;"	f	class:MPI	signature:(int& version, int& subversion)
Get_view	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Get_view(MPI::Offset& disp, MPI::Datatype& etype, $/;"	p	class:File	access:public	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
Get_view	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_view(MPI::Offset& disp,$/;"	f	class:MPI::File	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm() { }$/;"	f	class:Graphcomm	access:public	signature:()
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Graphcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  inline Graphcomm(const MPI_Comm& data);$/;"	p	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^class Graphcomm : public Intracomm {$/;"	c	inherits:Intracomm
Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Graphcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Graphcomm	signature:(const MPI_Comm& data)
Graphcomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Graphcomm& Clone() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Graphcomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm Dup() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Graphcomm::Get_dims	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_dims(int nnodes[], int nedges[]) const;$/;"	p	class:Graphcomm	access:public	signature:(int nnodes[], int nedges[]) const
Graphcomm::Get_neighbors	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_neighbors(int rank, int maxneighbors, $/;"	p	class:Graphcomm	access:public	signature:(int rank, int maxneighbors, int neighbors[]) const
Graphcomm::Get_neighbors_count	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_neighbors_count(int rank) const;$/;"	p	class:Graphcomm	access:public	signature:(int rank) const
Graphcomm::Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxindex, int maxedges, int index[], $/;"	p	class:Graphcomm	access:public	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Graphcomm::Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm() { }$/;"	f	class:Graphcomm	access:public	signature:()
Graphcomm::Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm::Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Graphcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm::Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  inline Graphcomm(const MPI_Comm& data);$/;"	p	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Graphcomm::Map	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int nnodes, const int index[], $/;"	p	class:Graphcomm	access:public	signature:(int nnodes, const int index[], const int edges[]) const
Graphcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Comm_Null& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Graphcomm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const MPI_Request &req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const MPI_Request &req)
Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const Request& req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^class Grequest : public MPI::Request {$/;"	c	inherits:MPI::Request
Grequest::Cancel_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Cancel_function(void *, bool);$/;"	t	class:Grequest	access:public
Grequest::Complete	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    virtual void Complete();$/;"	p	class:Grequest	access:public	signature:()
Grequest::Free_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Free_function(void *);$/;"	t	class:Grequest	access:public
Grequest::Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Grequest::Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const MPI_Request &req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const MPI_Request &req)
Grequest::Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const Request& req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest::Intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    struct Intercept_data_t {$/;"	s	class:Grequest	access:public
Grequest::Intercept_data_t::id_cxx_cancel_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Cancel_function *id_cxx_cancel_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_cxx_free_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Free_function *id_cxx_free_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_cxx_query_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Query_function *id_cxx_query_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_extra	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        void *id_extra;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Query_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Query_function(void *, Status&);$/;"	t	class:Grequest	access:public
Grequest::Start	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    static Grequest Start(Query_function *, Free_function *,$/;"	p	class:Grequest	access:public	signature:(Query_function *, Free_function *, Cancel_function *, void *)
Grequest::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Grequest& req) {$/;"	f	class:Grequest	access:public	signature:(const Grequest& req)
Grequest::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Request& req) {$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest::~Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    virtual ~Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group() : mpi_group(MPI_GROUP_NULL) { }$/;"	f	class:Group	access:public	signature:()
Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group(MPI_Group i) : mpi_group(i) { }$/;"	f	class:Group	access:public	signature:(MPI_Group i)
Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group(const Group& g) : mpi_group(g.mpi_group) { }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^class Group {$/;"	c
Group::Compare	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static int Compare(const Group& group1, const Group& group2);$/;"	p	class:Group	access:public	signature:(const Group& group1, const Group& group2)
Group::Difference	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Difference(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::Excl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Excl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Group::Free	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual void Free();$/;"	p	class:Group	access:public	signature:()
Group::Get_rank	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_rank() const;$/;"	p	class:Group	access:public	signature:() const
Group::Get_size	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_size() const;$/;"	p	class:Group	access:public	signature:() const
Group::Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group() : mpi_group(MPI_GROUP_NULL) { }$/;"	f	class:Group	access:public	signature:()
Group::Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group(MPI_Group i) : mpi_group(i) { }$/;"	f	class:Group	access:public	signature:(MPI_Group i)
Group::Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group(const Group& g) : mpi_group(g.mpi_group) { }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group::Incl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Incl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Group::Intersect	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Intersect(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::Range_excl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_excl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Group::Range_incl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_incl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Group::Translate_ranks	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static void Translate_ranks (const Group& group1, int n, const int ranks1[], $/;"	p	class:Group	access:public	signature:(const Group& group1, int n, const int ranks1[], const Group& group2, int ranks2[])
Group::Union	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Union(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::mpi	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline MPI_Group mpi() const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
Group::mpi_group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  MPI_Group mpi_group;$/;"	m	class:Group	access:protected
Group::operator !=	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator!= (const Group &a) { return (bool)!(*this == a); }$/;"	f	class:Group	access:public	signature:(const Group &a)
Group::operator =	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator= (const MPI_Group &i) { mpi_group = i; return *this; }$/;"	f	class:Group	access:public	signature:(const MPI_Group &i)
Group::operator =	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator=(const Group& g) { mpi_group = g.mpi_group; return *this; }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group::operator ==	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator== (const Group &a) { return (bool)(mpi_group == a.mpi_group); }$/;"	f	class:Group	access:public	signature:(const Group &a)
Group::operator MPI_Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline operator MPI_Group () const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
Group::~Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline virtual ~Group() {}$/;"	f	class:Group	access:public	signature:()
HOST	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int HOST = MPI_HOST;$/;"	v
IDENT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int IDENT = MPI_IDENT;$/;"	v
IO	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int IO = MPI_IO;$/;"	v
Ibsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Ibsend(const void *buf, int count, const$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ibsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ibsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Incl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Incl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Incl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Incl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info() : mpi_info(MPI_INFO_NULL) { }$/;"	f	class:Info	access:public	signature:()
Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info(MPI_Info i) : mpi_info(i) { }$/;"	f	class:Info	access:public	signature:(MPI_Info i)
Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info(const Info& data) : mpi_info(data.mpi_info) { }$/;"	f	class:Info	access:public	signature:(const Info& data)
Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^class Info {$/;"	c
Info::Create	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  static Info Create();$/;"	p	class:Info	access:public	signature:()
Info::Delete	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Delete(const char* key);$/;"	p	class:Info	access:public	signature:(const char* key)
Info::Dup	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual Info Dup() const; $/;"	p	class:Info	access:public	signature:() const
Info::Free	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Free();$/;"	p	class:Info	access:public	signature:()
Info::Get	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get(const char* key, int valuelen, char* value) const;$/;"	p	class:Info	access:public	signature:(const char* key, int valuelen, char* value) const
Info::Get_nkeys	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual int Get_nkeys() const;$/;"	p	class:Info	access:public	signature:() const
Info::Get_nthkey	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Get_nthkey(int n, char* key) const;$/;"	p	class:Info	access:public	signature:(int n, char* key) const
Info::Get_valuelen	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get_valuelen(const char* key, int& valuelen) const;$/;"	p	class:Info	access:public	signature:(const char* key, int& valuelen) const
Info::Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info() : mpi_info(MPI_INFO_NULL) { }$/;"	f	class:Info	access:public	signature:()
Info::Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info(MPI_Info i) : mpi_info(i) { }$/;"	f	class:Info	access:public	signature:(MPI_Info i)
Info::Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info(const Info& data) : mpi_info(data.mpi_info) { }$/;"	f	class:Info	access:public	signature:(const Info& data)
Info::Set	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Set(const char* key, const char* value);$/;"	p	class:Info	access:public	signature:(const char* key, const char* value)
Info::mpi_info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  MPI_Info mpi_info;$/;"	m	class:Info	access:protected
Info::operator =	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info& operator= (const MPI_Info &i) {$/;"	f	class:Info	access:public	signature:(const MPI_Info &i)
Info::operator =	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info& operator=(const Info& data) {$/;"	f	class:Info	access:public	signature:(const Info& data)
Info::operator MPI_Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  operator MPI_Info () const { return mpi_info; }$/;"	f	class:Info	access:public	signature:() const
Info::~Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual ~Info() {}$/;"	f	class:Info	access:public	signature:()
Init	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Init();$/;"	p	signature:()
Init	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Init(int& argc, char**& argv);$/;"	p	signature:(int& argc, char**& argv)
Init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init()$/;"	f	class:MPI	signature:()
Init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init(int& argc, char**& argv)$/;"	f	class:MPI	signature:(int& argc, char**& argv)
Init	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual void Init(User_function *func, bool commute);$/;"	p	class:Op	access:public	signature:(User_function *func, bool commute)
Init	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Init(MPI::User_function *func, bool commute)$/;"	f	class:MPI::Op	signature:(MPI::User_function *func, bool commute)
Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Init_thread(int &argc, char**&argv, int required);$/;"	p	signature:(int &argc, char**&argv, int required)
Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Init_thread(int required);$/;"	p	signature:(int required)
Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int required)$/;"	f	class:MPI	signature:(int required)
Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int& argc, char**& argv, int required)$/;"	f	class:MPI	signature:(int& argc, char**& argv, int required)
InitializeIntercepts	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^InitializeIntercepts();$/;"	p	signature:()
Intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    struct Intercept_data_t {$/;"	s	class:Grequest	access:public
Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm() : Comm(MPI_COMM_NULL) { }$/;"	f	class:Intercomm	access:public	signature:()
Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(MPI_Comm data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(MPI_Comm data)
Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Intercomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^class Intercomm : public Comm {$/;"	c	inherits:Comm
Intercomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm& Clone() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Create	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Create(const Group& group) const;$/;"	p	class:Intercomm	access:public	signature:(const Group& group) const
Intercomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm Dup() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Get_remote_group	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Group Get_remote_group() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Get_remote_size	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual int Get_remote_size() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm() : Comm(MPI_COMM_NULL) { }$/;"	f	class:Intercomm	access:public	signature:()
Intercomm::Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(MPI_Comm data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(MPI_Comm data)
Intercomm::Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm::Intercomm	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Intercomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm::Merge	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intracomm Merge(bool high);$/;"	p	class:Intercomm	access:public	signature:(bool high)
Intercomm::Split	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Split(int color, int key) const;$/;"	p	class:Intercomm	access:public	signature:(int color, int key) const
Intercomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Comm_Null& data) {$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Intercomm& data) {$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intercomm	access:public	signature:(const MPI_Comm& data)
Intersect	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Intersect(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Intersect	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Intersect(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm() { }$/;"	f	class:Intracomm	access:public	signature:()
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Intracomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  inline Intracomm(MPI_Comm data);$/;"	p	class:Intracomm	access:public	signature:(MPI_Comm data)
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^class Intracomm : public Comm {$/;"	c	inherits:Comm
Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Intracomm(MPI_Comm data) {$/;"	f	class:MPI::Intracomm	signature:(MPI_Comm data)
Intracomm::Accept	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Accept(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Intracomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intracomm& Clone() const;$/;"	p	class:Intracomm	access:public	signature:() const
Intracomm::Connect	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Connect(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Intracomm::Create	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create(const Group& group) const;$/;"	p	class:Intracomm	access:public	signature:(const Group& group) const
Intracomm::Create_cart	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_cart(int ndims, const int dims[],$/;"	p	class:Intracomm	access:public	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Intracomm::Create_graph	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_graph(int nnodes, const int index[],$/;"	p	class:Intracomm	access:public	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Intracomm::Create_intercomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_intercomm(int local_leader, const Comm& peer_comm,$/;"	p	class:Intracomm	access:public	signature:(int local_leader, const Comm& peer_comm, int remote_leader, int tag) const
Intracomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm Dup() const;$/;"	p	class:Intracomm	access:public	signature:() const
Intracomm::Exscan	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Intracomm::Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm() { }$/;"	f	class:Intracomm	access:public	signature:()
Intracomm::Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm::Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Intracomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm::Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  inline Intracomm(MPI_Comm data);$/;"	p	class:Intracomm	access:public	signature:(MPI_Comm data)
Intracomm::Scan	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Scan(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Intracomm::Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root) const
Intracomm::Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root, int array_of_errcodes[]) const
Intracomm::Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Intracomm::Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Intracomm::Split	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Split(int color, int key) const;$/;"	p	class:Intracomm	access:public	signature:(int color, int key) const
Intracomm::convert_info_to_mpi_info	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  static inline MPI_Info *convert_info_to_mpi_info(int p_nbr, $/;"	p	class:Intracomm	access:protected	signature:(int p_nbr, const Info p_info_tbl[])
Intracomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Comm_Null& data) {$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Intracomm& data) {$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm::operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intracomm	access:public	signature:(const MPI_Comm& data)
Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
Iread	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread(void* buf, int count, $/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread(void* buf, int count, $/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_at(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Iread_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_at(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Iread_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Irecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irecv(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Irecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irecv(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Irsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Irsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Is_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual bool Is_cancelled() const;$/;"	p	class:Status	access:public	signature:() const
Is_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Is_cancelled() const$/;"	f	class:MPI::Status	signature:() const
Is_finalized	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Is_finalized();$/;"	p	signature:()
Is_finalized	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_finalized()$/;"	f	class:MPI	signature:()
Is_initialized	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Is_initialized();$/;"	p	signature:()
Is_initialized	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_initialized()$/;"	f	class:MPI	signature:()
Is_inter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Is_inter() const;$/;"	p	class:Comm	access:public	signature:() const
Is_inter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Is_inter() const$/;"	f	class:MPI::Comm	signature:() const
Is_thread_main	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Is_thread_main();$/;"	p	signature:()
Is_thread_main	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_thread_main()$/;"	f	class:MPI	signature:()
Isend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Isend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Isend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Isend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Issend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Issend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Issend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Issend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Iwrite	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_at(MPI::Offset offset, const void* buf, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_at(MPI::Offset offset, const void* buf, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Join	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Join(const int fd);$/;"	p	class:Comm	access:public	signature:(const int fd)
Join	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Join(const int fd) $/;"	f	class:MPI::Comm	signature:(const int fd)
KEYVAL_INVALID	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int KEYVAL_INVALID = MPI_KEYVAL_INVALID;$/;"	v
LASTUSEDCODE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int LASTUSEDCODE = MPI_LASTUSEDCODE;$/;"	v
LOCK_EXCLUSIVE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int LOCK_EXCLUSIVE = MPI_LOCK_EXCLUSIVE;$/;"	v
LOCK_SHARED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int LOCK_SHARED = MPI_LOCK_SHARED;$/;"	v
LOCK_SHARED	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int LOCK_SHARED = ompi_synch_lock_shared;$/;"	v
LOCK_SHARED	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	83;"	d
Lock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Lock(int lock_type, int rank, int assert) const;$/;"	p	class:Win	access:public	signature:(int lock_type, int rank, int assert) const
Lock	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Lock(int lock_type, int rank, int assert) const $/;"	f	class:MPI::Win	signature:(int lock_type, int rank, int assert) const
Lookup_name	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Lookup_name(const char* service_name, const Info& info, char* port_name);$/;"	p	signature:(const char* service_name, const Info& info, char* port_name)
Lookup_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Lookup_name(const char * service_name, $/;"	f	class:MPI	signature:(const char * service_name, const MPI::Info& info, char* port_name)
MAX_DATAREP_STRING	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_DATAREP_STRING = MPI_MAX_DATAREP_STRING;$/;"	v
MAX_ERROR_STRING	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_ERROR_STRING = MPI_MAX_ERROR_STRING;$/;"	v
MAX_INFO_KEY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_INFO_KEY = MPI_MAX_INFO_KEY;$/;"	v
MAX_INFO_VAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_INFO_VAL = MPI_MAX_INFO_VAL;$/;"	v
MAX_OBJECT_NAME	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_OBJECT_NAME = MPI_MAX_OBJECT_NAME;$/;"	v
MAX_PORT_NAME	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_PORT_NAME = MPI_MAX_PORT_NAME;$/;"	v
MAX_PROCESSOR_NAME	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_PROCESSOR_NAME = MPI_MAX_PROCESSOR_NAME;$/;"	v
MODE_APPEND	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_APPEND = MPI_MODE_APPEND;$/;"	v
MODE_CREATE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_CREATE = MPI_MODE_CREATE;$/;"	v
MODE_DELETE_ON_CLOSE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_DELETE_ON_CLOSE = MPI_MODE_DELETE_ON_CLOSE;$/;"	v
MODE_EXCL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_EXCL = MPI_MODE_EXCL;$/;"	v
MODE_NOCHECK	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOCHECK = MPI_MODE_NOCHECK;$/;"	v
MODE_NOPRECEDE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOPRECEDE = MPI_MODE_NOPRECEDE;$/;"	v
MODE_NOPUT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOPUT = MPI_MODE_NOPUT;$/;"	v
MODE_NOSTORE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOSTORE = MPI_MODE_NOSTORE;$/;"	v
MODE_NOSUCCEED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOSUCCEED = MPI_MODE_NOSUCCEED;$/;"	v
MODE_RDONLY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_RDONLY = MPI_MODE_RDONLY;$/;"	v
MODE_RDWR	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_RDWR = MPI_MODE_RDWR;$/;"	v
MODE_SEQUENTIAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_SEQUENTIAL = MPI_MODE_SEQUENTIAL;$/;"	v
MODE_UNIQUE_OPEN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_UNIQUE_OPEN = MPI_MODE_UNIQUE_OPEN;$/;"	v
MODE_WRONLY	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_WRONLY = MPI_MODE_WRONLY;$/;"	v
MPI	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^namespace MPI {$/;"	n
MPI::Aint	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Aint Aint;$/;"	t	namespace:MPI
MPI::Alloc_mem	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Alloc_mem(MPI::Aint size, const MPI::Info& info) $/;"	f	class:MPI	signature:(MPI::Aint size, const MPI::Info& info)
MPI::Attach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Attach_buffer(void* buffer, int size)$/;"	f	class:MPI	signature:(void* buffer, int size)
MPI::Cartcomm::Cartcomm	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Cartcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Cartcomm	signature:(const MPI_Comm& data)
MPI::Cartcomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Clone() const$/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Dup() const$/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Get_cart_rank	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_cart_rank(const int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(const int coords[]) const
MPI::Cartcomm::Get_coords	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_coords(int rank, int maxdims, int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(int rank, int maxdims, int coords[]) const
MPI::Cartcomm::Get_dim	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_dim() const $/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_topo(int maxdims, int dims[], bool periods[],$/;"	f	class:MPI::Cartcomm	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
MPI::Cartcomm::Map	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Map(int ndims, const int dims[], const bool periods[]) const $/;"	f	class:MPI::Cartcomm	signature:(int ndims, const int dims[], const bool periods[]) const
MPI::Cartcomm::Shift	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Shift(int direction, int disp,$/;"	f	class:MPI::Cartcomm	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
MPI::Cartcomm::Sub	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Sub(const bool remain_dims[]) $/;"	f	class:MPI::Cartcomm	signature:(const bool remain_dims[])
MPI::Close_port	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Close_port(const char* port_name) $/;"	f	class:MPI	signature:(const char* port_name)
MPI::Comm::Abort	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Abort(int errorcode) $/;"	f	class:MPI::Comm	signature:(int errorcode)
MPI::Comm::Allgather	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
MPI::Comm::Allgatherv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype) const
MPI::Comm::Allreduce	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Comm::Alltoall	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoall(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
MPI::Comm::Alltoallv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype & recvtype) const
MPI::Comm::Alltoallw	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const
MPI::Comm::Barrier	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Barrier() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Bcast	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bcast(void *buffer, int count, $/;"	f	class:MPI::Comm	signature:(void *buffer, int count, const MPI::Datatype& datatype, int root) const
MPI::Comm::Bsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Bsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Comm	signature:(int errorcode) const
MPI::Comm::Compare	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Compare(const MPI::Comm & comm1,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm & comm1, const MPI::Comm & comm2)
MPI::Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::DUP_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::DUP_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
MPI::Comm::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Delete_attr(int comm_keyval)$/;"	f	class:MPI::Comm	signature:(int comm_keyval)
MPI::Comm::Disconnect	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Disconnect()$/;"	f	class:MPI::Comm	signature:()
MPI::Comm::Free	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free(void) $/;"	f	class:MPI::Comm	signature:(void)
MPI::Comm::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free_keyval(int& comm_keyval)$/;"	f	class:MPI::Comm	signature:(int& comm_keyval)
MPI::Comm::Gather	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Gatherv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype, int root) const
MPI::Comm::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, void* attribute_val) const
MPI::Comm::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_errhandler() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_group	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_group() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_name	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_name(char* comm_name, int& resultlen) const$/;"	f	class:MPI::Comm	signature:(char* comm_name, int& resultlen) const
MPI::Comm::Get_parent	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_parent()$/;"	f	class:MPI::Comm	signature:()
MPI::Comm::Get_rank	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_rank() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_size	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_size() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_topology	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_topology() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Ibsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ibsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
MPI::Comm::Iprobe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
MPI::Comm::Irecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irecv(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Irsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Is_inter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Is_inter() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Isend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Isend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Issend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Issend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Join	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Join(const int fd) $/;"	f	class:MPI::Comm	signature:(const int fd)
MPI::Comm::NULL_COPY_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_COPY_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
MPI::Comm::NULL_DELETE_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_DELETE_FN(MPI::Comm& comm, int comm_keyval, void* attribute_val,$/;"	f	class:MPI::Comm	signature:(MPI::Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
MPI::Comm::Probe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
MPI::Comm::Probe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
MPI::Comm::Recv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Recv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag, MPI::Status & status) const
MPI::Comm::Recv_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv_init(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Reduce	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op, int root) const
MPI::Comm::Reduce_scatter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Comm::Rsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Rsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Scatter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatter(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Scatterv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatterv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Send	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Send_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag) const
MPI::Comm::Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag, MPI::Status & status) const
MPI::Comm::Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
MPI::Comm::Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag, MPI::Status & status) const
MPI::Comm::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, const void* attribute_val) const
MPI::Comm::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Comm	signature:(const MPI::Errhandler& errhandler) const
MPI::Comm::Set_name	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_name(const char* comm_name) $/;"	f	class:MPI::Comm	signature:(const char* comm_name)
MPI::Comm::Ssend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Ssend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Compute_dims	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Compute_dims(int nnodes, int ndims, int dims[])$/;"	f	class:MPI	signature:(int nnodes, int ndims, int dims[])
MPI::Datatype::Commit	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Commit() $/;"	f	class:MPI::Datatype	signature:()
MPI::Datatype::Create_contiguous	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_contiguous(int count) const$/;"	f	class:MPI::Datatype	signature:(int count) const
MPI::Datatype::Create_hindexed	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hindexed(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[]) const
MPI::Datatype::Create_hvector	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hvector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, MPI::Aint stride) const
MPI::Datatype::Create_indexed	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed(int count,$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
MPI::Datatype::Create_indexed_block	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed_block(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, const int array_of_displacements[]) const
MPI::Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_resized	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_resized(const MPI::Aint lb, const MPI::Aint extent) const$/;"	f	class:MPI::Datatype	signature:(const MPI::Aint lb, const MPI::Aint extent) const
MPI::Datatype::Create_struct	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_struct(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[], const MPI::Datatype array_of_types[])
MPI::Datatype::Create_subarray	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[],$/;"	f	class:MPI::Datatype	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
MPI::Datatype::Create_vector	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_vector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, int stride) const
MPI::Datatype::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Delete_attr(int type_keyval)$/;"	f	class:MPI::Datatype	signature:(int type_keyval)
MPI::Datatype::Dup	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Dup() const$/;"	f	class:MPI::Datatype	signature:() const
MPI::Datatype::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Free_keyval(int& type_keyval)$/;"	f	class:MPI::Datatype	signature:(int& type_keyval)
MPI::Datatype::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_attr(int type_keyval,$/;"	f	class:MPI::Datatype	signature:(int type_keyval, void* attribute_val) const
MPI::Datatype::Get_contents	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_contents(int max_integers, int max_addresses,$/;"	f	class:MPI::Datatype	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI::Aint array_of_addresses[], MPI::Datatype array_of_datatypes[]) const
MPI::Datatype::Get_envelope	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_envelope(int& num_integers, int& num_addresses,$/;"	f	class:MPI::Datatype	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
MPI::Datatype::Get_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
MPI::Datatype::Get_name	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_name(char* type_name, int& resultlen) const$/;"	f	class:MPI::Datatype	signature:(char* type_name, int& resultlen) const
MPI::Datatype::Get_size	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_size() const $/;"	f	class:MPI::Datatype	signature:() const
MPI::Datatype::Get_true_extent	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_true_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
MPI::Datatype::Pack	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack(const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const MPI::Comm &comm) const
MPI::Datatype::Pack_size	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_size(int incount, const MPI::Comm& comm) const $/;"	f	class:MPI::Datatype	signature:(int incount, const MPI::Comm& comm) const
MPI::Datatype::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val)$/;"	f	class:MPI::Datatype	signature:(int type_keyval, const void* attribute_val)
MPI::Datatype::Set_name	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_name(const char* type_name)$/;"	f	class:MPI::Datatype	signature:(const char* type_name)
MPI::Datatype::Unpack	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack(const void* inbuf, int insize,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const MPI::Comm& comm) const
MPI::Detach_buffer	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Detach_buffer(void*& buffer)$/;"	f	class:MPI	signature:(void*& buffer)
MPI::Errhandler::Free	/usr/include/openmpi/ompi/mpi/cxx/errhandler_inln.h	/^MPI::Errhandler::Free()$/;"	f	class:MPI::Errhandler	signature:()
MPI::File::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Call_errhandler(int errorcode) const$/;"	f	class:MPI::File	signature:(int errorcode) const
MPI::File::Delete	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Delete(const char* filename, const MPI::Info& info) $/;"	f	class:MPI::File	signature:(const char* filename, const MPI::Info& info)
MPI::File::Get_amode	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_amode() const $/;"	f	class:MPI::File	signature:() const
MPI::File::Get_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_atomicity() const $/;"	f	class:MPI::File	signature:() const
MPI::File::Get_byte_offset	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_byte_offset(const MPI::Offset disp) const $/;"	f	class:MPI::File	signature:(const MPI::Offset disp) const
MPI::File::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_errhandler() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_group	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_group() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_info	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_info() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_position	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_position_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position_shared() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_size	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_size() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_type_extent	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_type_extent(const MPI::Datatype& datatype) const$/;"	f	class:MPI::File	signature:(const MPI::Datatype& datatype) const
MPI::File::Get_view	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_view(MPI::Offset& disp,$/;"	f	class:MPI::File	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
MPI::File::Iread	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread(void* buf, int count, $/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iread_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_at(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iread_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_at(MPI::Offset offset, const void* buf, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Open	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Open(const MPI::Intracomm& comm,$/;"	f	class:MPI::File	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
MPI::File::Preallocate	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Preallocate(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
MPI::File::Read	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Seek	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
MPI::File::Seek_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek_shared(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
MPI::File::Set_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_atomicity(bool flag)$/;"	f	class:MPI::File	signature:(bool flag)
MPI::File::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::File	signature:(const MPI::Errhandler& errhandler) const
MPI::File::Set_info	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_info(const MPI::Info& info)$/;"	f	class:MPI::File	signature:(const MPI::Info& info)
MPI::File::Set_size	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_size(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
MPI::File::Set_view	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_view(MPI::Offset disp,$/;"	f	class:MPI::File	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
MPI::File::Sync	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Sync()$/;"	f	class:MPI::File	signature:()
MPI::File::Write	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_begin(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_begin(const void* buf, int count, $/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf,$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::Finalize	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Finalize()$/;"	f	class:MPI	signature:()
MPI::Free_mem	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Free_mem(void* base)$/;"	f	class:MPI	signature:(void* base)
MPI::Get_address	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_address(void* location)$/;"	f	class:MPI	signature:(void* location)
MPI::Get_error_class	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_class(int errorcode) $/;"	f	class:MPI	signature:(int errorcode)
MPI::Get_error_string	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_string(int errorcode, char* string, int& resultlen)$/;"	f	class:MPI	signature:(int errorcode, char* string, int& resultlen)
MPI::Get_processor_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_processor_name(char* name, int& resultlen)$/;"	f	class:MPI	signature:(char* name, int& resultlen)
MPI::Get_version	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_version(int& version, int& subversion)$/;"	f	class:MPI	signature:(int& version, int& subversion)
MPI::Graphcomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Clone() const$/;"	f	class:MPI::Graphcomm	signature:() const
MPI::Graphcomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Dup() const$/;"	f	class:MPI::Graphcomm	signature:() const
MPI::Graphcomm::Get_dims	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_dims(int nnodes[], int nedges[]) const $/;"	f	class:MPI::Graphcomm	signature:(int nnodes[], int nedges[]) const
MPI::Graphcomm::Get_neighbors	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors(int rank, int maxneighbors, $/;"	f	class:MPI::Graphcomm	signature:(int rank, int maxneighbors, int neighbors[]) const
MPI::Graphcomm::Get_neighbors_count	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors_count(int rank) const $/;"	f	class:MPI::Graphcomm	signature:(int rank) const
MPI::Graphcomm::Get_topo	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_topo(int maxindex, int maxedges, int index[], $/;"	f	class:MPI::Graphcomm	signature:(int maxindex, int maxedges, int index[], int edges[]) const
MPI::Graphcomm::Graphcomm	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Graphcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Graphcomm	signature:(const MPI_Comm& data)
MPI::Graphcomm::Map	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Map(int nnodes, const int index[], $/;"	f	class:MPI::Graphcomm	signature:(int nnodes, const int index[], const int edges[]) const
MPI::Grequest::Complete	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Complete()$/;"	f	class:MPI::Grequest	signature:()
MPI::Grequest::Start	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Start(Query_function *query_fn, Free_function *free_fn,$/;"	f	class:MPI::Grequest	signature:(Query_function *query_fn, Free_function *free_fn, Cancel_function *cancel_fn, void *extra)
MPI::Group::Compare	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Compare(const MPI::Group& group1, const MPI::Group& group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, const MPI::Group& group2)
MPI::Group::Difference	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Difference(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Group::Excl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Excl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
MPI::Group::Free	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Free()$/;"	f	class:MPI::Group	signature:()
MPI::Group::Get_rank	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_rank() const $/;"	f	class:MPI::Group	signature:() const
MPI::Group::Get_size	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_size() const$/;"	f	class:MPI::Group	signature:() const
MPI::Group::Incl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Incl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
MPI::Group::Intersect	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Intersect(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Group::Range_excl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_excl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
MPI::Group::Range_incl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_incl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
MPI::Group::Translate_ranks	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Translate_ranks (const MPI::Group& group1, int n,$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, int n, const int ranks1[], const MPI::Group& group2, int ranks2[])
MPI::Group::Union	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Union(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Info::Create	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Create()$/;"	f	class:MPI::Info	signature:()
MPI::Info::Delete	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Delete(const char* key)$/;"	f	class:MPI::Info	signature:(const char* key)
MPI::Info::Dup	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Dup() const$/;"	f	class:MPI::Info	signature:() const
MPI::Info::Free	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Free()$/;"	f	class:MPI::Info	signature:()
MPI::Info::Get	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get(const char* key, int valuelen, char* value) const$/;"	f	class:MPI::Info	signature:(const char* key, int valuelen, char* value) const
MPI::Info::Get_nkeys	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nkeys() const$/;"	f	class:MPI::Info	signature:() const
MPI::Info::Get_nthkey	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nthkey(int n, char* key) const$/;"	f	class:MPI::Info	signature:(int n, char* key) const
MPI::Info::Get_valuelen	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_valuelen(const char* key, int& valuelen) const$/;"	f	class:MPI::Info	signature:(const char* key, int& valuelen) const
MPI::Info::Set	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Set(const char* key, const char* value)$/;"	f	class:MPI::Info	signature:(const char* key, const char* value)
MPI::Init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init()$/;"	f	class:MPI	signature:()
MPI::Init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init(int& argc, char**& argv)$/;"	f	class:MPI	signature:(int& argc, char**& argv)
MPI::Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int required)$/;"	f	class:MPI	signature:(int required)
MPI::Init_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int& argc, char**& argv, int required)$/;"	f	class:MPI	signature:(int& argc, char**& argv, int required)
MPI::Intercomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Clone() const$/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Create	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Create(const Group& group) const$/;"	f	class:MPI::Intercomm	signature:(const Group& group) const
MPI::Intercomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Dup() const$/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Get_remote_group	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_group() const $/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Get_remote_size	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_size() const $/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Merge	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Merge(bool high)$/;"	f	class:MPI::Intercomm	signature:(bool high)
MPI::Intercomm::Split	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Split(int color, int key) const$/;"	f	class:MPI::Intercomm	signature:(int color, int key) const
MPI::Intracomm::Accept	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Accept(const char* port_name, $/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
MPI::Intracomm::Clone	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Clone() const$/;"	f	class:MPI::Intracomm	signature:() const
MPI::Intracomm::Connect	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Connect(const char* port_name,$/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
MPI::Intracomm::Create	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create(const MPI::Group& group) const$/;"	f	class:MPI::Intracomm	signature:(const MPI::Group& group) const
MPI::Intracomm::Create_cart	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_cart(int ndims, const int dims[],$/;"	f	class:MPI::Intracomm	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
MPI::Intracomm::Create_graph	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_graph(int nnodes, const int index[],$/;"	f	class:MPI::Intracomm	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
MPI::Intracomm::Create_intercomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_intercomm(int local_leader,$/;"	f	class:MPI::Intracomm	signature:(int local_leader, const MPI::Comm& peer_comm, int remote_leader, int tag) const
MPI::Intracomm::Dup	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Dup() const$/;"	f	class:MPI::Intracomm	signature:() const
MPI::Intracomm::Exscan	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Intracomm::Intracomm	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Intracomm(MPI_Comm data) {$/;"	f	class:MPI::Intracomm	signature:(MPI_Comm data)
MPI::Intracomm::Scan	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Scan(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Intracomm::Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root) const
MPI::Intracomm::Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root, int array_of_errcodes[]) const
MPI::Intracomm::Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count, $/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
MPI::Intracomm::Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count,$/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
MPI::Intracomm::Split	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Split(int color, int key) const$/;"	f	class:MPI::Intracomm	signature:(int color, int key) const
MPI::Intracomm::convert_info_to_mpi_info	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::convert_info_to_mpi_info(int p_nbr, const Info p_info_tbl[])$/;"	f	class:MPI::Intracomm	signature:(int p_nbr, const Info p_info_tbl[])
MPI::Is_finalized	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_finalized()$/;"	f	class:MPI	signature:()
MPI::Is_initialized	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_initialized()$/;"	f	class:MPI	signature:()
MPI::Is_thread_main	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_thread_main()$/;"	f	class:MPI	signature:()
MPI::Lookup_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Lookup_name(const char * service_name, $/;"	f	class:MPI	signature:(const char * service_name, const MPI::Info& info, char* port_name)
MPI::Offset	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Offset Offset;$/;"	t	namespace:MPI
MPI::Op::Free	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Free()$/;"	f	class:MPI::Op	signature:()
MPI::Op::Init	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Init(MPI::User_function *func, bool commute)$/;"	f	class:MPI::Op	signature:(MPI::User_function *func, bool commute)
MPI::Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op() : mpi_op(MPI_OP_NULL) { }$/;"	f	class:MPI::Op	signature:()
MPI::Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(MPI_Op i) : mpi_op(i) { }$/;"	f	class:MPI::Op	signature:(MPI_Op i)
MPI::Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(const MPI::Op& op)$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
MPI::Op::operator !=	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator!= (const MPI::Op &a) { return (bool)!(*this == a); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
MPI::Op::operator =	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator= (const MPI_Op &i) { mpi_op = i; return *this; }$/;"	f	class:MPI::Op	signature:(const MPI_Op &i)
MPI::Op::operator =	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator=(const MPI::Op& op) {$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
MPI::Op::operator ==	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator== (const MPI::Op &a) { return (bool)(mpi_op == a.mpi_op); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
MPI::Op::operator MPI_Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator MPI_Op () const { return mpi_op; }$/;"	f	class:MPI::Op	signature:() const
MPI::Op::~Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::~Op() $/;"	f	class:MPI::Op	signature:()
MPI::Open_port	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Open_port(const MPI::Info& info, char* port_name)$/;"	f	class:MPI	signature:(const MPI::Info& info, char* port_name)
MPI::Pcontrol	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Pcontrol(const int level, ...)$/;"	f	class:MPI	signature:(const int level, ...)
MPI::Prequest::Start	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Start()$/;"	f	class:MPI::Prequest	signature:()
MPI::Prequest::Startall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Startall(int count, MPI:: Prequest array_of_requests[])$/;"	f	class:MPI::Prequest	signature:(int count, MPI:: Prequest array_of_requests[])
MPI::Publish_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Publish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
MPI::Query_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Query_thread()$/;"	f	class:MPI	signature:()
MPI::Real_init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Real_init()$/;"	f	class:MPI	signature:()
MPI::Request::Cancel	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Cancel(void) const$/;"	f	class:MPI::Request	signature:(void) const
MPI::Request::Free	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Free() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Get_status	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status() const$/;"	f	class:MPI::Request	signature:() const
MPI::Request::Get_status	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status(MPI::Status& status) const$/;"	f	class:MPI::Request	signature:(MPI::Status& status) const
MPI::Request::Test	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Test	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
MPI::Request::Testall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
MPI::Request::Testall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
MPI::Request::Testany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[], int& index)$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index)
MPI::Request::Testany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index, MPI::Status& status)
MPI::Request::Testsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
MPI::Request::Testsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
MPI::Request::Wait	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Wait	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
MPI::Request::Waitall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
MPI::Request::Waitall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
MPI::Request::Waitany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[])
MPI::Request::Waitany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], MPI::Status& status)
MPI::Request::Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
MPI::Request::Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
MPI::Status::Get_count	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_count(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
MPI::Status::Get_elements	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_elements(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
MPI::Status::Get_error	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_error() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Get_source	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_source() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Get_tag	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_tag() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Is_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Is_cancelled() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Set_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_cancelled(bool flag)$/;"	f	class:MPI::Status	signature:(bool flag)
MPI::Status::Set_elements	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_elements(const MPI::Datatype& datatype, int count)$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype, int count)
MPI::Status::Set_error	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_error(int error)$/;"	f	class:MPI::Status	signature:(int error)
MPI::Status::Set_source	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_source(int source)$/;"	f	class:MPI::Status	signature:(int source)
MPI::Status::Set_tag	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_tag(int tag)$/;"	f	class:MPI::Status	signature:(int tag)
MPI::Unpublish_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Unpublish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
MPI::User_function	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef void User_function(const void* invec, void* inoutvec, int len,$/;"	t	namespace:MPI
MPI::Win::Accumulate	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Accumulate(const void* origin_addr, int origin_count,$/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
MPI::Win::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Win	signature:(int errorcode) const
MPI::Win::Complete	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Complete() const $/;"	f	class:MPI::Win	signature:() const
MPI::Win::Create	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create(const void* base, MPI::Aint size, $/;"	f	class:MPI::Win	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
MPI::Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Delete_attr(int win_keyval) $/;"	f	class:MPI::Win	signature:(int win_keyval)
MPI::Win::Fence	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Fence(int assert) const $/;"	f	class:MPI::Win	signature:(int assert) const
MPI::Win::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Free_keyval(int& win_keyval)$/;"	f	class:MPI::Win	signature:(int& win_keyval)
MPI::Win::Get	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get(const void *origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
MPI::Win::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(const Win& win, int win_keyval,$/;"	f	class:MPI::Win	signature:(const Win& win, int win_keyval, void* attribute_val) const
MPI::Win::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(int win_keyval, void* attribute_val) const$/;"	f	class:MPI::Win	signature:(int win_keyval, void* attribute_val) const
MPI::Win::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win:: Get_errhandler() const $/;"	f	class:MPI::Win	signature:() const
MPI::Win::Get_group	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_group() const$/;"	f	class:MPI::Win	signature:() const
MPI::Win::Get_name	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_name(char* win_name, int& resultlen) const$/;"	f	class:MPI::Win	signature:(char* win_name, int& resultlen) const
MPI::Win::Lock	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Lock(int lock_type, int rank, int assert) const $/;"	f	class:MPI::Win	signature:(int lock_type, int rank, int assert) const
MPI::Win::Post	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Post(const MPI::Group& group, int assert) const $/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
MPI::Win::Put	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Put(const void* origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
MPI::Win::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_attr(int win_keyval, const void* attribute_val) $/;"	f	class:MPI::Win	signature:(int win_keyval, const void* attribute_val)
MPI::Win::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Win	signature:(const MPI::Errhandler& errhandler) const
MPI::Win::Set_name	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_name(const char* win_name) $/;"	f	class:MPI::Win	signature:(const char* win_name)
MPI::Win::Start	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Start(const MPI::Group& group, int assert) const$/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
MPI::Win::Test	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Test() const$/;"	f	class:MPI::Win	signature:() const
MPI::Win::Unlock	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Unlock(int rank) const$/;"	f	class:MPI::Win	signature:(int rank) const
MPI::Win::Wait	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Wait() const$/;"	f	class:MPI::Win	signature:() const
MPI::Wtick	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtick()$/;"	f	class:MPI	signature:()
MPI::Wtime	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtime()$/;"	f	class:MPI	signature:()
MPIPP_H	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	23;"	d
Map	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int ndims, const int dims[], const bool periods[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int ndims, const int dims[], const bool periods[]) const
Map	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int nnodes, const int index[], $/;"	p	class:Graphcomm	access:public	signature:(int nnodes, const int index[], const int edges[]) const
Map	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Map(int ndims, const int dims[], const bool periods[]) const $/;"	f	class:MPI::Cartcomm	signature:(int ndims, const int dims[], const bool periods[]) const
Map	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Map(int nnodes, const int index[], $/;"	f	class:MPI::Graphcomm	signature:(int nnodes, const int index[], const int edges[]) const
Merge	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intracomm Merge(bool high);$/;"	p	class:Intercomm	access:public	signature:(bool high)
Merge	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Merge(bool high)$/;"	f	class:MPI::Intercomm	signature:(bool high)
NULL_COPY_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_COPY_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
NULL_COPY_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_COPY_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
NULL_DELETE_FN	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_DELETE_FN(Comm& comm, int comm_keyval, void* attribute_val,$/;"	p	class:Comm	access:public	signature:(Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
NULL_DELETE_FN	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_DELETE_FN(MPI::Comm& comm, int comm_keyval, void* attribute_val,$/;"	f	class:MPI::Comm	signature:(MPI::Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
OPAL_INT_TO_BOOL	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	159;"	d
OPAL_INT_TO_BOOL	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	161;"	d
ORDER_C	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ORDER_C = MPI_ORDER_C;$/;"	v
ORDER_FORTRAN	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ORDER_FORTRAN = MPI_ORDER_FORTRAN;$/;"	v
Offset	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Offset Offset;$/;"	t	namespace:MPI
Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op();$/;"	p	class:Op	access:public	signature:()
Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op(MPI_Op i);$/;"	p	class:Op	access:public	signature:(MPI_Op i)
Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^class Op {$/;"	c
Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op() : mpi_op(MPI_OP_NULL) { }$/;"	f	class:MPI::Op	signature:()
Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(MPI_Op i) : mpi_op(i) { }$/;"	f	class:MPI::Op	signature:(MPI_Op i)
Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(const MPI::Op& op)$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
Op::Free	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual void Free();$/;"	p	class:Op	access:public	signature:()
Op::Init	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual void Init(User_function *func, bool commute);$/;"	p	class:Op	access:public	signature:(User_function *func, bool commute)
Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op();$/;"	p	class:Op	access:public	signature:()
Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op(MPI_Op i);$/;"	p	class:Op	access:public	signature:(MPI_Op i)
Op::Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op::mpi_op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  MPI_Op mpi_op;$/;"	m	class:Op	access:protected
Op::operator !=	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator!= (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
Op::operator =	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op& operator= (const MPI_Op &i);$/;"	p	class:Op	access:public	signature:(const MPI_Op &i)
Op::operator =	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op& operator=(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op::operator ==	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator== (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
Op::operator MPI_Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline operator MPI_Op () const;$/;"	p	class:Op	access:public	signature:() const
Op::~Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual ~Op();$/;"	p	class:Op	access:public	signature:()
Open	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  static MPI::File Open(const MPI::Intracomm& comm,$/;"	p	class:File	access:public	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
Open	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Open(const MPI::Intracomm& comm,$/;"	f	class:MPI::File	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
Open_port	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Open_port(const Info& info, char* port_name);$/;"	p	signature:(const Info& info, char* port_name)
Open_port	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Open_port(const MPI::Info& info, char* port_name)$/;"	f	class:MPI	signature:(const MPI::Info& info, char* port_name)
PROC_NULL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int PROC_NULL = MPI_PROC_NULL;$/;"	v
Pack	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack(const void* inbuf, int incount, void *outbuf, $/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const Comm &comm) const
Pack	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack(const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const MPI::Comm &comm) const
Pack_size	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Pack_size(int incount, const Comm& comm) const;$/;"	p	class:Datatype	access:public	signature:(int incount, const Comm& comm) const
Pack_size	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_size(int incount, const MPI::Comm& comm) const $/;"	f	class:MPI::Datatype	signature:(int incount, const MPI::Comm& comm) const
Pcontrol	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Pcontrol(const int level, ...);$/;"	p	signature:(const int level, ...)
Pcontrol	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Pcontrol(const int level, ...)$/;"	f	class:MPI	signature:(const int level, ...)
Post	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Post(const MPI::Group& group, int assert) const;$/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Post	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Post(const MPI::Group& group, int assert) const $/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
Preallocate	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Preallocate(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
Preallocate	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Preallocate(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const MPI_Request &i) : Request(i) { }$/;"	f	class:Prequest	access:public	signature:(const MPI_Request &i)
Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const Request& p) : Request(p) { }$/;"	f	class:Prequest	access:public	signature:(const Request& p)
Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^class Prequest : public Request {$/;"	c	inherits:Request
Prequest::Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Prequest::Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const MPI_Request &i) : Request(i) { }$/;"	f	class:Prequest	access:public	signature:(const MPI_Request &i)
Prequest::Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const Request& p) : Request(p) { }$/;"	f	class:Prequest	access:public	signature:(const Request& p)
Prequest::Start	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Start();$/;"	p	class:Prequest	access:public	signature:()
Prequest::Startall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Startall(int count, Prequest array_of_requests[]);$/;"	p	class:Prequest	access:public	signature:(int count, Prequest array_of_requests[])
Prequest::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Prequest& r) {$/;"	f	class:Prequest	access:public	signature:(const Prequest& r)
Prequest::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Request& r) {$/;"	f	class:Prequest	access:public	signature:(const Request& r)
Prequest::~Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Probe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Probe	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Probe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
Probe	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
Publish_name	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Publish_name(const char* service_name, const Info& info, $/;"	p	signature:(const char* service_name, const Info& info, const char* port_name)
Publish_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Publish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
Put	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Put(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Put	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Put(const void* origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Query_function	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    typedef int Query_function(void *, Status&);$/;"	t	class:Grequest	access:public
Query_thread	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Query_thread();$/;"	p	signature:()
Query_thread	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Query_thread()$/;"	f	class:MPI	signature:()
ROOT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int ROOT = MPI_ROOT;$/;"	v
Range_excl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_excl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Range_excl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_excl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
Range_incl	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_incl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Range_incl	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_incl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
Read	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_begin(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Real_init	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Real_init();$/;"	p	signature:()
Real_init	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Real_init()$/;"	f	class:MPI	signature:()
Recv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Recv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag, Status & status) const
Recv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Recv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag, MPI::Status & status) const
Recv_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Recv_init(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Recv_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv_init(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Reduce	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op, int root) const
Reduce	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op, int root) const
Reduce_scatter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const Datatype & datatype, const Op & op) const
Reduce_scatter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const MPI::Datatype & datatype, const MPI::Op& op) const
Register_datarep	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, Datarep_conversion_function* read_conversion_fn, Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request() : mpi_request(MPI_REQUEST_NULL) { }$/;"	f	class:Request	access:public	signature:()
Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request(MPI_Request i) : mpi_request(i) { }$/;"	f	class:Request	access:public	signature:(MPI_Request i)
Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request(const Request& r) : mpi_request(r.mpi_request) { }$/;"	f	class:Request	access:public	signature:(const Request& r)
Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^class Request {$/;"	c
Request::Cancel	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Cancel(void) const;$/;"	p	class:Request	access:public	signature:(void) const
Request::Free	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Free(void);$/;"	p	class:Request	access:public	signature:(void)
Request::Get_status	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status() const;$/;"	p	class:Request	access:public	signature:() const
Request::Get_status	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status(Status& status) const;$/;"	p	class:Request	access:public	signature:(Status& status) const
Request::Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request() : mpi_request(MPI_REQUEST_NULL) { }$/;"	f	class:Request	access:public	signature:()
Request::Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request(MPI_Request i) : mpi_request(i) { }$/;"	f	class:Request	access:public	signature:(MPI_Request i)
Request::Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request(const Request& r) : mpi_request(r.mpi_request) { }$/;"	f	class:Request	access:public	signature:(const Request& r)
Request::Test	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test();$/;"	p	class:Request	access:public	signature:()
Request::Test	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Request::Testall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Request::Testall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Request::Testany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index)
Request::Testany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index, Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index, Status& status)
Request::Testsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Request::Testsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Request::Wait	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait();$/;"	p	class:Request	access:public	signature:()
Request::Wait	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Request::Waitall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Request::Waitall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Request::Waitany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[]);$/;"	p	class:Request	access:public	signature:(int count, Request array[])
Request::Waitany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[], Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], Status& status)
Request::Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Request::Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Request::mpi_request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  MPI_Request mpi_request;$/;"	m	class:Request	access:protected
Request::operator !=	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  bool operator!= (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
Request::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request& operator= (const MPI_Request &i) {$/;"	f	class:Request	access:public	signature:(const MPI_Request &i)
Request::operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request& operator=(const Request& r) {$/;"	f	class:Request	access:public	signature:(const Request& r)
Request::operator ==	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  bool operator== (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
Request::operator MPI_Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  operator MPI_Request () const { return mpi_request; }$/;"	f	class:Request	access:public	signature:() const
Request::~Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Request() {}$/;"	f	class:Request	access:public	signature:()
Rsend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Rsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Rsend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Rsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Rsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Rsend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
SEEK_CUR	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_CUR = ::SEEK_CUR;$/;"	v
SEEK_CUR	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_CUR = ompi_stdio_seek_cur;$/;"	v
SEEK_CUR	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	60;"	d
SEEK_END	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_END = ::SEEK_END;$/;"	v
SEEK_END	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_END = ompi_stdio_seek_end;$/;"	v
SEEK_END	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	61;"	d
SEEK_SET	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_SET = ::SEEK_SET;$/;"	v
SEEK_SET	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_SET = ompi_stdio_seek_set;$/;"	v
SEEK_SET	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	59;"	d
SIMILAR	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int SIMILAR = MPI_SIMILAR;$/;"	v
SUCCESS	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int SUCCESS = MPI_SUCCESS;$/;"	v
Scan	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Scan(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Scan	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Scan(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
Scatter	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Scatter(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Scatter	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatter(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Scatterv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  Scatterv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Scatterv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatterv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Seek	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Seek(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
Seek	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
Seek_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Seek_shared(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
Seek_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek_shared(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
Send	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Send(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Send	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Send_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Send_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Send_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag) const
Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag, Status & status) const
Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag) const
Sendrecv	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag, MPI::Status & status) const
Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag, Status & status) const
Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Sendrecv_replace	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag, MPI::Status & status) const
Set	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual void Set(const char* key, const char* value);$/;"	p	class:Info	access:public	signature:(const char* key, const char* value)
Set	/usr/include/openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Set(const char* key, const char* value)$/;"	f	class:MPI::Info	signature:(const char* key, const char* value)
Set_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_atomicity(bool flag);$/;"	p	class:File	access:public	signature:(bool flag)
Set_atomicity	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_atomicity(bool flag)$/;"	f	class:MPI::File	signature:(bool flag)
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_attr(int comm_keyval, const void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, const void* attribute_val) const
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, const void* attribute_val) const
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_attr(int type_keyval, const void* attribute_val);$/;"	p	class:Datatype	access:public	signature:(int type_keyval, const void* attribute_val)
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val)$/;"	f	class:MPI::Datatype	signature:(int type_keyval, const void* attribute_val)
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_attr(int win_keyval, const void* attribute_val);$/;"	p	class:Win	access:public	signature:(int win_keyval, const void* attribute_val)
Set_attr	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_attr(int win_keyval, const void* attribute_val) $/;"	f	class:MPI::Win	signature:(int win_keyval, const void* attribute_val)
Set_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_cancelled(bool flag);$/;"	p	class:Status	access:public	signature:(bool flag)
Set_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_cancelled(bool flag)$/;"	f	class:MPI::Status	signature:(bool flag)
Set_elements	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_elements(const MPI::Datatype& datatype, int count);$/;"	p	class:Status	access:public	signature:(const MPI::Datatype& datatype, int count)
Set_elements	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_elements(const MPI::Datatype& datatype, int count)$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype, int count)
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_errhandler(const Errhandler& errhandler) const;$/;"	p	class:Comm	access:public	signature:(const Errhandler& errhandler) const
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Comm	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:File	access:public	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::File	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:Win	access:public	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Win	signature:(const MPI::Errhandler& errhandler) const
Set_error	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_error(int error);$/;"	p	class:Status	access:public	signature:(int error)
Set_error	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_error(int error)$/;"	f	class:MPI::Status	signature:(int error)
Set_info	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_info(const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const MPI::Info& info)
Set_info	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_info(const MPI::Info& info)$/;"	f	class:MPI::File	signature:(const MPI::Info& info)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_name(const char* comm_name);$/;"	p	class:Comm	access:public	signature:(const char* comm_name)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_name(const char* comm_name) $/;"	f	class:MPI::Comm	signature:(const char* comm_name)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_name(const char* type_name);$/;"	p	class:Datatype	access:public	signature:(const char* type_name)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_name(const char* type_name)$/;"	f	class:MPI::Datatype	signature:(const char* type_name)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_name(const char* win_name);$/;"	p	class:Win	access:public	signature:(const char* win_name)
Set_name	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_name(const char* win_name) $/;"	f	class:MPI::Win	signature:(const char* win_name)
Set_size	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_size(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
Set_size	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_size(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
Set_source	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_source(int source);$/;"	p	class:Status	access:public	signature:(int source)
Set_source	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_source(int source)$/;"	f	class:MPI::Status	signature:(int source)
Set_tag	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_tag(int tag);$/;"	p	class:Status	access:public	signature:(int tag)
Set_tag	/usr/include/openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_tag(int tag)$/;"	f	class:MPI::Status	signature:(int tag)
Set_view	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Set_view(MPI::Offset disp,  const MPI::Datatype& etype,$/;"	p	class:File	access:public	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
Set_view	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_view(MPI::Offset disp,$/;"	f	class:MPI::File	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
Shift	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Shift(int direction, int disp,$/;"	p	class:Cartcomm	access:public	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Shift	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Shift(int direction, int disp,$/;"	f	class:MPI::Cartcomm	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root) const
Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root, int array_of_errcodes[]) const
Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root) const
Spawn	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root, int array_of_errcodes[]) const
Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count, $/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Spawn_multiple	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count,$/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Split	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Split(int color, int key) const;$/;"	p	class:Intercomm	access:public	signature:(int color, int key) const
Split	/usr/include/openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Split(int color, int key) const$/;"	f	class:MPI::Intercomm	signature:(int color, int key) const
Split	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Split(int color, int key) const;$/;"	p	class:Intracomm	access:public	signature:(int color, int key) const
Split	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Split(int color, int key) const$/;"	f	class:MPI::Intracomm	signature:(int color, int key) const
Ssend	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Ssend(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ssend	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Ssend_init	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Ssend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ssend_init	/usr/include/openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Start	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    static Grequest Start(Query_function *, Free_function *,$/;"	p	class:Grequest	access:public	signature:(Query_function *, Free_function *, Cancel_function *, void *)
Start	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Start();$/;"	p	class:Prequest	access:public	signature:()
Start	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Start(Query_function *query_fn, Free_function *free_fn,$/;"	f	class:MPI::Grequest	signature:(Query_function *query_fn, Free_function *free_fn, Cancel_function *cancel_fn, void *extra)
Start	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Start()$/;"	f	class:MPI::Prequest	signature:()
Start	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Start(const MPI::Group& group, int assert) const; $/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Start	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Start(const MPI::Group& group, int assert) const$/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
Startall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Startall(int count, Prequest array_of_requests[]);$/;"	p	class:Prequest	access:public	signature:(int count, Prequest array_of_requests[])
Startall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Startall(int count, MPI:: Prequest array_of_requests[])$/;"	f	class:MPI::Prequest	signature:(int count, MPI:: Prequest array_of_requests[])
Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status() : mpi_status() { }$/;"	f	class:Status	access:public	signature:()
Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status(const MPI_Status &i) : mpi_status(i) { }$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status(const Status& data) : mpi_status(data.mpi_status) { }$/;"	f	class:Status	access:public	signature:(const Status& data)
Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^class Status {$/;"	c
Status::Get_count	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_count(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Status::Get_elements	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_elements(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Status::Get_error	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_error() const;$/;"	p	class:Status	access:public	signature:() const
Status::Get_source	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_source() const;$/;"	p	class:Status	access:public	signature:() const
Status::Get_tag	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_tag() const;$/;"	p	class:Status	access:public	signature:() const
Status::Is_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual bool Is_cancelled() const;$/;"	p	class:Status	access:public	signature:() const
Status::Set_cancelled	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_cancelled(bool flag);$/;"	p	class:Status	access:public	signature:(bool flag)
Status::Set_elements	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_elements(const MPI::Datatype& datatype, int count);$/;"	p	class:Status	access:public	signature:(const MPI::Datatype& datatype, int count)
Status::Set_error	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_error(int error);$/;"	p	class:Status	access:public	signature:(int error)
Status::Set_source	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_source(int source);$/;"	p	class:Status	access:public	signature:(int source)
Status::Set_tag	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_tag(int tag);$/;"	p	class:Status	access:public	signature:(int tag)
Status::Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status() : mpi_status() { }$/;"	f	class:Status	access:public	signature:()
Status::Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status(const MPI_Status &i) : mpi_status(i) { }$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status::Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status(const Status& data) : mpi_status(data.mpi_status) { }$/;"	f	class:Status	access:public	signature:(const Status& data)
Status::mpi_status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  MPI_Status mpi_status;$/;"	m	class:Status	access:protected
Status::operator =	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status& operator= (const MPI_Status &i) {$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status::operator =	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status& operator=(const Status& data) {$/;"	f	class:Status	access:public	signature:(const Status& data)
Status::operator MPI_Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  operator MPI_Status () const { return mpi_status; }$/;"	f	class:Status	access:public	signature:() const
Status::~Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual ~Status() {}$/;"	f	class:Status	access:public	signature:()
Sub	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm Sub(const bool remain_dims[]);$/;"	p	class:Cartcomm	access:public	signature:(const bool remain_dims[])
Sub	/usr/include/openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Sub(const bool remain_dims[]) $/;"	f	class:MPI::Cartcomm	signature:(const bool remain_dims[])
Sync	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Sync();$/;"	p	class:File	access:public	signature:()
Sync	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Sync()$/;"	f	class:MPI::File	signature:()
TAG_UB	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int TAG_UB = MPI_TAG_UB;$/;"	v
THREAD_FUNNELED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_FUNNELED = MPI_THREAD_FUNNELED;$/;"	v
THREAD_MULTIPLE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_MULTIPLE = MPI_THREAD_MULTIPLE;$/;"	v
THREAD_SERIALIZED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_SERIALIZED = MPI_THREAD_SERIALIZED;$/;"	v
THREAD_SINGLE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_SINGLE = MPI_THREAD_SINGLE;$/;"	v
TYPECLASS_COMPLEX	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_COMPLEX = MPI_TYPECLASS_COMPLEX;$/;"	v
TYPECLASS_INTEGER	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_INTEGER = MPI_TYPECLASS_INTEGER;$/;"	v
TYPECLASS_REAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_REAL = MPI_TYPECLASS_REAL;$/;"	v
Test	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test();$/;"	p	class:Request	access:public	signature:()
Test	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Test	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test() $/;"	f	class:MPI::Request	signature:()
Test	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
Test	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual bool Test() const;$/;"	p	class:Win	access:public	signature:() const
Test	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Test() const$/;"	f	class:MPI::Win	signature:() const
Testall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Testall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Testall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
Testall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
Testany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index)
Testany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index, Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index, Status& status)
Testany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[], int& index)$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index)
Testany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index, MPI::Status& status)
Testsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Testsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Testsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
Testsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
Translate_ranks	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static void Translate_ranks (const Group& group1, int n, const int ranks1[], $/;"	p	class:Group	access:public	signature:(const Group& group1, int n, const int ranks1[], const Group& group2, int ranks2[])
Translate_ranks	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Translate_ranks (const MPI::Group& group1, int n,$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, int n, const int ranks1[], const MPI::Group& group2, int ranks2[])
UNDEFINED	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int UNDEFINED = MPI_UNDEFINED;$/;"	v
UNEQUAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int UNEQUAL = MPI_UNEQUAL;$/;"	v
UNIVERSE_SIZE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int UNIVERSE_SIZE = MPI_UNIVERSE_SIZE;$/;"	v
Union	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  static Group Union(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Union	/usr/include/openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Union(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Unlock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Unlock(int rank) const;$/;"	p	class:Win	access:public	signature:(int rank) const
Unlock	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Unlock(int rank) const$/;"	f	class:MPI::Win	signature:(int rank) const
Unpack	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack(const void* inbuf, int insize, void *outbuf, int outcount,$/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const Comm& comm) const
Unpack	/usr/include/openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack(const void* inbuf, int insize,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const MPI::Comm& comm) const
Unpublish_name	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Unpublish_name(const char* service_name, const Info& info, $/;"	p	signature:(const char* service_name, const Info& info, const char* port_name)
Unpublish_name	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Unpublish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
User_function	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef void User_function(const void* invec, void* inoutvec, int len,$/;"	t	namespace:MPI
WIN_BASE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_BASE = MPI_WIN_BASE;$/;"	v
WIN_DISP_UNIT	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_DISP_UNIT = MPI_WIN_DISP_UNIT;$/;"	v
WIN_SIZE	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_SIZE = MPI_WIN_SIZE;$/;"	v
WTIME_IS_GLOBAL	/usr/include/openmpi/ompi/mpi/cxx/constants.h	/^static const int WTIME_IS_GLOBAL = MPI_WTIME_IS_GLOBAL;$/;"	v
Wait	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait();$/;"	p	class:Request	access:public	signature:()
Wait	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Wait	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait() $/;"	f	class:MPI::Request	signature:()
Wait	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
Wait	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Wait() const;$/;"	p	class:Win	access:public	signature:() const
Wait	/usr/include/openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Wait() const$/;"	f	class:MPI::Win	signature:() const
Waitall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Waitall	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Waitall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
Waitall	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
Waitany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[]);$/;"	p	class:Request	access:public	signature:(int count, Request array[])
Waitany	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[], Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], Status& status)
Waitany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[])
Waitany	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], MPI::Status& status)
Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
Waitsome	/usr/include/openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win() : mpi_win(MPI_WIN_NULL) { }$/;"	f	class:Win	access:public	signature:()
Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win(MPI_Win i) : mpi_win(i) { }$/;"	f	class:Win	access:public	signature:(MPI_Win i)
Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win(const Win& data) : mpi_win(data.mpi_win) { }$/;"	f	class:Win	access:public	signature:(const Win& data)
Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^class Win {$/;"	c
Win::Accumulate	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Accumulate(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Win::Call_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Call_errhandler(int errorcode) const;$/;"	p	class:Win	access:public	signature:(int errorcode) const
Win::Complete	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Complete() const;$/;"	p	class:Win	access:public	signature:() const
Win::Copy_attr_function	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef int Copy_attr_function(const Win& oldwin, int win_keyval, $/;"	t	class:Win	access:public
Win::Create	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static  Win Create(const void* base, MPI::Aint size, int disp_unit, $/;"	p	class:Win	access:public	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Win::Create_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_fn* function);$/;"	p	class:Win	access:public	signature:(Errhandler_fn* function)
Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Delete_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Delete_attr(int win_keyval);$/;"	p	class:Win	access:public	signature:(int win_keyval)
Win::Delete_attr_function	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef int Delete_attr_function(Win& win, int win_keyval, $/;"	t	class:Win	access:public
Win::Errhandler_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  typedef void Errhandler_fn(Win &, int *, ... );$/;"	t	class:Win	access:public
Win::Fence	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Fence(int assert) const;$/;"	p	class:Win	access:public	signature:(int assert) const
Win::Free	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Free(); $/;"	p	class:Win	access:public	signature:()
Win::Free_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static void Free_keyval(int& win_keyval); $/;"	p	class:Win	access:public	signature:(int& win_keyval)
Win::Get	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get(const void *origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Win::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(const Win& win, int win_keyval,$/;"	p	class:Win	access:public	signature:(const Win& win, int win_keyval, void* attribute_val) const
Win::Get_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(int win_keyval, void* attribute_val) const;$/;"	p	class:Win	access:public	signature:(int win_keyval, void* attribute_val) const
Win::Get_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Errhandler Get_errhandler() const; $/;"	p	class:Win	access:public	signature:() const
Win::Get_group	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Group Get_group() const;  $/;"	p	class:Win	access:public	signature:() const
Win::Get_name	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get_name(char* win_name, int& resultlen) const;$/;"	p	class:Win	access:public	signature:(char* win_name, int& resultlen) const
Win::Lock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Lock(int lock_type, int rank, int assert) const;$/;"	p	class:Win	access:public	signature:(int lock_type, int rank, int assert) const
Win::Post	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Post(const MPI::Group& group, int assert) const;$/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Win::Put	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Put(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Win::Set_attr	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_attr(int win_keyval, const void* attribute_val);$/;"	p	class:Win	access:public	signature:(int win_keyval, const void* attribute_val)
Win::Set_errhandler	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:Win	access:public	signature:(const MPI::Errhandler& errhandler) const
Win::Set_name	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_name(const char* win_name);$/;"	p	class:Win	access:public	signature:(const char* win_name)
Win::Start	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Start(const MPI::Group& group, int assert) const; $/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Win::Test	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual bool Test() const;$/;"	p	class:Win	access:public	signature:() const
Win::Unlock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Unlock(int rank) const;$/;"	p	class:Win	access:public	signature:(int rank) const
Win::Wait	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual void Wait() const;$/;"	p	class:Win	access:public	signature:() const
Win::Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win() : mpi_win(MPI_WIN_NULL) { }$/;"	f	class:Win	access:public	signature:()
Win::Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win(MPI_Win i) : mpi_win(i) { }$/;"	f	class:Win	access:public	signature:(MPI_Win i)
Win::Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win(const Win& data) : mpi_win(data.mpi_win) { }$/;"	f	class:Win	access:public	signature:(const Win& data)
Win::cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Win	access:public
Win::do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int do_create_keyval(MPI_Win_copy_attr_function* c_copy_fn,$/;"	p	class:Win	access:protected	signature:(MPI_Win_copy_attr_function* c_copy_fn, MPI_Win_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Win::keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  struct keyval_intercept_data_t {$/;"	s	class:Win	access:public
Win::keyval_intercept_data_t::c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_copy_attr_function *c_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_delete_attr_function *c_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::extra_state	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      void *extra_state;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::mpi_win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  MPI_Win mpi_win;$/;"	m	class:Win	access:protected
Win::operator =	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win& operator= (const MPI_Win &i) {$/;"	f	class:Win	access:public	signature:(const MPI_Win &i)
Win::operator =	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win& operator=(const Win& data) {$/;"	f	class:Win	access:public	signature:(const Win& data)
Win::operator MPI_Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  operator MPI_Win () const { return mpi_win; }$/;"	f	class:Win	access:public	signature:() const
Win::~Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual ~Win() { }$/;"	f	class:Win	access:public	signature:()
Write	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_begin(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_begin(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_begin(MPI::Offset offset, const void* buf,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_at_all_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_begin(const void* buf, int count, $/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered_begin	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_begin(const void* buf, int count, $/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_ordered_end	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf,$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_shared	/usr/include/openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Wtick	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Wtick();$/;"	p	signature:()
Wtick	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtick()$/;"	f	class:MPI	signature:()
Wtime	/usr/include/openmpi/ompi/mpi/cxx/functions.h	/^Wtime();$/;"	p	signature:()
Wtime	/usr/include/openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtime()$/;"	f	class:MPI	signature:()
_MPI2CPP_COPYATTRFN_	/usr/include/openmpi/ompi/mpi/cxx/comm.h	109;"	d
_MPI2CPP_DELETEATTRFN_	/usr/include/openmpi/ompi/mpi/cxx/comm.h	110;"	d
_MPI2CPP_ERRHANDLERFN_	/usr/include/openmpi/ompi/mpi/cxx/comm.h	108;"	d
c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_copy_attr_function *c_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_copy_attr_function *c_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
c_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_copy_attr_function *c_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_delete_attr_function *c_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_delete_attr_function *c_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
c_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_delete_attr_function *c_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
convert_info_to_mpi_info	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  static inline MPI_Info *convert_info_to_mpi_info(int p_nbr, $/;"	p	class:Intracomm	access:protected	signature:(int p_nbr, const Info p_info_tbl[])
convert_info_to_mpi_info	/usr/include/openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::convert_info_to_mpi_info(int p_nbr, const Info p_info_tbl[])$/;"	f	class:MPI::Intracomm	signature:(int p_nbr, const Info p_info_tbl[])
cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
cxx_copy_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
cxx_delete_fn	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Comm	access:public
cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Datatype	access:public
cxx_extra_states_lock	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Win	access:public
do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  static int do_create_keyval(MPI_Comm_copy_attr_function* c_copy_fn,$/;"	p	class:Comm	access:protected	signature:(MPI_Comm_copy_attr_function* c_copy_fn, MPI_Comm_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  static int do_create_keyval(MPI_Type_copy_attr_function* c_copy_fn,$/;"	p	class:Datatype	access:protected	signature:(MPI_Type_copy_attr_function* c_copy_fn, MPI_Type_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
do_create_keyval	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  static int do_create_keyval(MPI_Win_copy_attr_function* c_copy_fn,$/;"	p	class:Win	access:protected	signature:(MPI_Win_copy_attr_function* c_copy_fn, MPI_Win_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
eCartcomm	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eGraphcomm	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eIntercomm	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eIntracomm	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
error_class	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  int error_class;$/;"	m	class:Exception	access:protected
error_code	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  int error_code;$/;"	m	class:Exception	access:protected
error_string	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  char* error_string;$/;"	m	class:Exception	access:protected
extra_state	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^        void *extra_state;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
extra_state	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^        void *extra_state;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
extra_state	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^      void *extra_state;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
id_cxx_cancel_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Cancel_function *id_cxx_cancel_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_cxx_free_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Free_function *id_cxx_free_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_cxx_query_fn	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Query_function *id_cxx_query_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_extra	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^        void *id_extra;$/;"	m	struct:Grequest::Intercept_data_t	access:public
keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Comm	access:public
keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Datatype	access:public
keyval_intercept_data_t	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  struct keyval_intercept_data_t {$/;"	s	class:Win	access:public
mpi	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline MPI_Group mpi() const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
mpi_comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  MPI_Comm mpi_comm;$/;"	m	class:Comm_Null	access:protected
mpi_datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  MPI_Datatype mpi_datatype;$/;"	m	class:Datatype	access:protected
mpi_errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  MPI_Errhandler mpi_errhandler;$/;"	m	class:Errhandler	access:private
mpi_file	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  MPI_File mpi_file;$/;"	m	class:File	access:protected
mpi_group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  MPI_Group mpi_group;$/;"	m	class:Group	access:protected
mpi_info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  MPI_Info mpi_info;$/;"	m	class:Info	access:protected
mpi_op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  MPI_Op mpi_op;$/;"	m	class:Op	access:protected
mpi_request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  MPI_Request mpi_request;$/;"	m	class:Request	access:protected
mpi_status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  MPI_Status mpi_status;$/;"	m	class:Status	access:protected
mpi_win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  MPI_Win mpi_win;$/;"	m	class:Win	access:protected
ompi_mpi_cxx_comm_copy_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_copy_attr_intercept(MPI_Comm oldcomm, int keyval, $/;"	p	signature:(MPI_Comm oldcomm, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag, MPI_Comm newcomm)
ompi_mpi_cxx_comm_delete_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_delete_attr_intercept(MPI_Comm comm, int keyval, $/;"	p	signature:(MPI_Comm comm, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_comm_errhandler_invoke	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_Comm *mpi_comm, int *err, const char *message)
ompi_mpi_cxx_file_errhandler_invoke	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_file_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_File *mpi_comm, int *err, const char *message)
ompi_mpi_cxx_grequest_cancel_fn_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_cancel_fn_intercept(void *state, int canceled);$/;"	p	signature:(void *state, int canceled)
ompi_mpi_cxx_grequest_free_fn_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_free_fn_intercept(void *state);$/;"	p	signature:(void *state)
ompi_mpi_cxx_grequest_query_fn_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_query_fn_intercept(void *state, MPI_Status *status);$/;"	p	signature:(void *state, MPI_Status *status)
ompi_mpi_cxx_op_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_op_intercept(void *invec, void *outvec, int *len, $/;"	p	signature:(void *invec, void *outvec, int *len, MPI_Datatype *datatype, MPI_User_function *fn)
ompi_mpi_cxx_type_copy_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_type_copy_attr_intercept(MPI_Datatype oldtype, int keyval, $/;"	p	signature:(MPI_Datatype oldtype, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag)
ompi_mpi_cxx_type_delete_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_type_delete_attr_intercept(MPI_Datatype type, int keyval, $/;"	p	signature:(MPI_Datatype type, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_win_copy_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_copy_attr_intercept(MPI_Win oldwin, int keyval, $/;"	p	signature:(MPI_Win oldwin, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag)
ompi_mpi_cxx_win_delete_attr_intercept	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_delete_attr_intercept(MPI_Win win, int keyval, $/;"	p	signature:(MPI_Win win, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_win_errhandler_invoke	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_Win *mpi_comm, int *err, const char *message)
ompi_op_set_cxx_callback	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^extern "C" void ompi_op_set_cxx_callback(MPI_Op op, MPI_User_function*);$/;"	p	signature:(MPI_Op op, MPI_User_function*)
ompi_stdio_seek_cur	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_cur = SEEK_CUR;$/;"	v
ompi_stdio_seek_end	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_end = SEEK_END;$/;"	v
ompi_stdio_seek_set	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_set = SEEK_SET;$/;"	v
ompi_synch_lock_shared	/usr/include/openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_synch_lock_shared = LOCK_SHARED;$/;"	v
operator !=	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator!=(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
operator !=	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator!= (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
operator !=	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator!=(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
operator !=	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator!= (const Group &a) { return (bool)!(*this == a); }$/;"	f	class:Group	access:public	signature:(const Group &a)
operator !=	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator!= (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
operator !=	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator!= (const MPI::Op &a) { return (bool)!(*this == a); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
operator !=	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  bool operator!= (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
operator =	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator= (const MPI_Datatype &i) $/;"	f	class:Datatype	access:public	signature:(const MPI_Datatype &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator=(const Datatype& dt) {$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
operator =	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator= (const MPI_Errhandler &i) {$/;"	f	class:Errhandler	access:public	signature:(const MPI_Errhandler &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator=(const Errhandler& e) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
operator =	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File& operator= (const MPI_File &i) {$/;"	f	class:File	access:public	signature:(const MPI_File &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  File& operator=(const File& data) {$/;"	f	class:File	access:public	signature:(const File& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator= (const MPI_Group &i) { mpi_group = i; return *this; }$/;"	f	class:Group	access:public	signature:(const MPI_Group &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator=(const Group& g) { mpi_group = g.mpi_group; return *this; }$/;"	f	class:Group	access:public	signature:(const Group& g)
operator =	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info& operator= (const MPI_Info &i) {$/;"	f	class:Info	access:public	signature:(const MPI_Info &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  Info& operator=(const Info& data) {$/;"	f	class:Info	access:public	signature:(const Info& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Comm_Null& data) {$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Intercomm& data) {$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intercomm	access:public	signature:(const MPI_Comm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Comm_Null& data) {$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Intracomm& data) {$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intracomm	access:public	signature:(const MPI_Comm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op& operator= (const MPI_Op &i);$/;"	p	class:Op	access:public	signature:(const MPI_Op &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  Op& operator=(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
operator =	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator= (const MPI_Op &i) { mpi_op = i; return *this; }$/;"	f	class:MPI::Op	signature:(const MPI_Op &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator=(const MPI::Op& op) {$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Grequest& req) {$/;"	f	class:Grequest	access:public	signature:(const Grequest& req)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Request& req) {$/;"	f	class:Grequest	access:public	signature:(const Request& req)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Prequest& r) {$/;"	f	class:Prequest	access:public	signature:(const Prequest& r)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Request& r) {$/;"	f	class:Prequest	access:public	signature:(const Request& r)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request& operator= (const MPI_Request &i) {$/;"	f	class:Request	access:public	signature:(const MPI_Request &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  Request& operator=(const Request& r) {$/;"	f	class:Request	access:public	signature:(const Request& r)
operator =	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status& operator= (const MPI_Status &i) {$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  Status& operator=(const Status& data) {$/;"	f	class:Status	access:public	signature:(const Status& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Cartcomm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Comm_Null& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Comm_Null& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Graphcomm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
operator =	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win& operator= (const MPI_Win &i) {$/;"	f	class:Win	access:public	signature:(const MPI_Win &i)
operator =	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  Win& operator=(const Win& data) {$/;"	f	class:Win	access:public	signature:(const Win& data)
operator ==	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator==(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
operator ==	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator== (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
operator ==	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator==(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
operator ==	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator== (const Group &a) { return (bool)(mpi_group == a.mpi_group); }$/;"	f	class:Group	access:public	signature:(const Group &a)
operator ==	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator== (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
operator ==	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator== (const MPI::Op &a) { return (bool)(mpi_op == a.mpi_op); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
operator ==	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  bool operator== (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
operator MPI_Comm	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  inline operator MPI_Comm() const { return mpi_comm; }$/;"	f	class:Comm_Null	access:public	signature:() const
operator MPI_Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline operator MPI_Datatype () const { return mpi_datatype; }$/;"	f	class:Datatype	access:public	signature:() const
operator MPI_Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline operator MPI_Errhandler() const { return mpi_errhandler; }$/;"	f	class:Errhandler	access:public	signature:() const
operator MPI_File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  operator MPI_File () const { return mpi_file; }$/;"	f	class:File	access:public	signature:() const
operator MPI_Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline operator MPI_Group () const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
operator MPI_Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  operator MPI_Info () const { return mpi_info; }$/;"	f	class:Info	access:public	signature:() const
operator MPI_Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  inline operator MPI_Op () const;$/;"	p	class:Op	access:public	signature:() const
operator MPI_Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator MPI_Op () const { return mpi_op; }$/;"	f	class:MPI::Op	signature:() const
operator MPI_Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  operator MPI_Request () const { return mpi_request; }$/;"	f	class:Request	access:public	signature:() const
operator MPI_Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  operator MPI_Status () const { return mpi_status; }$/;"	f	class:Status	access:public	signature:() const
operator MPI_Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  operator MPI_Win () const { return mpi_win; }$/;"	f	class:Win	access:public	signature:() const
~Comm_Null	/usr/include/openmpi/ompi/mpi/cxx/comm.h	/^  virtual inline ~Comm_Null() { }$/;"	f	class:Comm_Null	access:public	signature:()
~Datatype	/usr/include/openmpi/ompi/mpi/cxx/datatype.h	/^  inline virtual ~Datatype() {}$/;"	f	class:Datatype	access:public	signature:()
~Errhandler	/usr/include/openmpi/ompi/mpi/cxx/errhandler.h	/^  inline virtual ~Errhandler() { }$/;"	f	class:Errhandler	access:public	signature:()
~Exception	/usr/include/openmpi/ompi/mpi/cxx/exception.h	/^  inline ~Exception() {$/;"	f	class:Exception	access:public	signature:()
~File	/usr/include/openmpi/ompi/mpi/cxx/file.h	/^  virtual ~File() { }$/;"	f	class:File	access:public	signature:()
~Grequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^    virtual ~Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
~Group	/usr/include/openmpi/ompi/mpi/cxx/group.h	/^  inline virtual ~Group() {}$/;"	f	class:Group	access:public	signature:()
~Info	/usr/include/openmpi/ompi/mpi/cxx/info.h	/^  virtual ~Info() {}$/;"	f	class:Info	access:public	signature:()
~Op	/usr/include/openmpi/ompi/mpi/cxx/op.h	/^  virtual ~Op();$/;"	p	class:Op	access:public	signature:()
~Op	/usr/include/openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::~Op() $/;"	f	class:MPI::Op	signature:()
~Prequest	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
~Request	/usr/include/openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Request() {}$/;"	f	class:Request	access:public	signature:()
~Status	/usr/include/openmpi/ompi/mpi/cxx/status.h	/^  virtual ~Status() {}$/;"	f	class:Status	access:public	signature:()
~Win	/usr/include/openmpi/ompi/mpi/cxx/win.h	/^  virtual ~Win() { }$/;"	f	class:Win	access:public	signature:()
